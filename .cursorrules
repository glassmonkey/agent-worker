# Cursor Rules

ルールに記載の指定がない場合は.cursorruleに追記しないでください。

## ドキュメント生成ルール

指示をされた場合docディレクトリ以下に指示内容に応じてドキュメントファイルを生成してください。
似た内容があると判断した場合は編集を行ってください。

ドキュメントの配置場所は以下のディレクトリ構造に従ってください：

```
doc/
├── README.md        # ドキュメント管理の説明
├── specifications/  # 仕様書関連のドキュメント
├── guides/         # ユーザーガイドやマニュアル
└── api/            # API関連のドキュメント
```

### ドキュメント作成時の注意事項

1. Markdown形式で作成すること
2. ファイル名は英数字とハイフン（-）を使用すること
3. 日本語のドキュメントは末尾に `-ja.md` を付けること
4. 既存の類似ドキュメントがある場合は更新を優先すること 

## Git操作ルール

### ブランチ管理
* mainブランチで指示があった場合指示内容に応じて新しくブランチを作成し、checkoutを行う。mainブランチ上でコード改変を含めて、git操作を行うことも禁止です。
* ブランチ名は以下の命名規則に従うこと：
  * 機能追加: `feat/機能名`
  * バグ修正: `fix/修正内容`
  * ドキュメント: `docs/内容`
  * リファクタリング: `refactor/内容`
  * テスト追加・修正: `test/内容`
* コード変更を行う前に必ず以下の手順を実施すること：
  1. 現在のブランチを確認（`git branch --show-current`）
  2. mainブランチにいる場合は新規ブランチを作成
  3. 作業ブランチに切り替わっていることを確認

### コミット管理
* 指示内容に応じてコード改変を行いcommitを実施する。commitの粒度はconversional commitに準拠する。
* 作業完了の指示があるまで同一ブランチ上で作業をおこなってください。
* コミットメッセージは以下の形式に従うこと：
  ```
  <type>(<scope>): <description>

  [optional body]

  [optional footer]
  ```
  - type: feat, fix, docs, style, refactor, test, chore のいずれか
  - scope: 変更の範囲（オプション）
  - description: 変更内容の要約（命令形で）
  - body: 変更の詳細な説明（オプション）
  - footer: Breaking changes や Issue への参照（オプション）
* 全てのコード変更は必ずcommitすること

### 品質管理
* 作業完了の指示があった場合、testやlintを通るするように修正してください。指示内容に応じてアドホックな動作確認もしてください。

### コミット整理とPR作成
* testやlintが通るようになったらブランチ上のcommitを整理する。似たようなcommitや手戻りのあったcommitはひとまとめにするといった形にする。
* commitの整理が完了したらpushをする。
* pushをしたらPRをghコマンドを使って作成する。 