# プロジェクトルール

## ルールの追加
- 指示された内容は、特に指定がない限り本ファイル（.cursorrules）に追記する
- 追記する際は、関連する既存のセクションに追加するか、新しいセクションを作成する
- 追記後は必ずコミットし、CIの成功を確認する

## プロジェクト概要
- `app`ディレクトリ以下はNext.jsアプリケーション
- App Routerを採用
- TypeScriptとTailwind CSSを使用
- macOS環境を前提とした開発

## Makefileコマンド
- `make init`: プロジェクトの初期化
  - npm installの実行
  - huskyの準備
  - GitHub CLI（gh）のインストール（未インストールの場合）
    - Homebrewを使用してインストール（`brew install gh`）
- `make install`: 依存関係のインストール
- `make dev`: 開発サーバーの起動
- `make build`: プロダクションビルドの実行
- `make test`: テストの実行
- `make lint`: リントの実行
- `make type-check`: 型チェックの実行
- `make clean`: ビルドファイルとキャッシュの削除
- `make help`: 利用可能なコマンドの一覧表示

## Gitルール
- コミットメッセージは Conventional Commits 形式に従う
  - feat: 新機能の追加
  - fix: バグ修正
  - docs: ドキュメントの変更のみ
  - style: コードの意味に影響を与えない変更
  - refactor: バグ修正や機能追加を含まないコードの変更
  - test: テストの追加や既存テストの修正
  - chore: ビルドプロセスやツールの変更
- コミット管理
  - ファイルの変更後は必ずコミットする
  - 作業中は細かくコミットして変更を記録
  - プッシュ前に以下の手順でコミットを整理
    1. `git log`で作業内容を確認
    2. `git rebase -i main`で関連するコミットをまとめる
    3. コミットメッセージを適切に修正
    4. コミットの順序を整理
- 各コミットは単一の責任に焦点を当てる
- 最初のコミットは "first commit" とし、プロジェクトの初期設定を含める
- プッシュ前の確認
  - mainブランチの更新
    1. `git fetch origin main`で最新の情報を取得
    2. `git switch main`でmainブランチに切り替え
    3. `git pull origin main`で最新の変更を取り込む
    4. `git switch -`で作業ブランチに戻る
  - `git diff main`で変更内容を確認
  - 以下の点をチェック
    - 不要なファイルが含まれていないか
    - デバッグコードが残っていないか
    - 機密情報が含まれていないか
    - 意図しない変更が含まれていないか
  - 問題がある場合は適切に対処
    - 不要なファイルは削除またはgitignoreに追加
    - デバッグコードは削除
    - 機密情報は環境変数化
    - 意図しない変更は元に戻す
- Gitフックを使用して品質を担保
  - pre-push: プッシュ前に以下を実行
    - 型チェック
    - リント
    - テスト
    - 差分の確認（対話的に確認を要求）
  - huskyを使用してフックを管理
  - `npm install`時に自動的にフックが設定される

## ブランチ運用とPR
- 新しい作業は必ずブランチを作成して実施
  - 作業開始前に`.work/pr-draft.md`が存在する場合は削除
  - ブランチ名は作業内容を表す名前をつける
  - 例: `feature/add-user-auth`, `fix/login-error`
- 作業単位でPRを作成
  - `gh pr create`コマンドを使用
  - PRのタイトルは変更内容を簡潔に表現
  - PRの説明は以下の手順で作成
    1. `.work`ディレクトリを作成（存在しない場合）
    2. 一時的なマークダウンファイルを作成（例: `.work/pr-draft.md`）
    3. `.github/pull_request_template.md`の内容をベースに、PR固有の内容を記載
    4. `gh pr create --body-file`で一時ファイルを使用してPRを作成
    5. PR作成後も一時ファイルは保持（説明の更新に使用）
  - PRの説明には以下を含める
    - 概要: PRの目的、背景、変更点を簡潔に記載
    - 変更内容: 具体的な変更内容をリストアップ
    - 確認したこと: 動作確認やテストの内容を記載
    - 補足: レビュアーへの注意点や補足事項を記載
  - PRの説明を更新する場合
    1. `.work/pr-draft.md`を編集
    2. `gh pr edit --body-file .work/pr-draft.md`で説明を更新
    3. 更新後、変更をコミットして再度プッシュ
  - PRをマージ可能な状態にする
    1. mainブランチの最新変更を取り込む
       ```bash
       git fetch origin main
       git switch main
       git pull origin main
       git switch -
       git rebase main
       ```
    2. コンフリクトが発生した場合は解消
    3. 変更をプッシュ（必要に応じて`--force-with-lease`を使用）
    4. CIが成功することを確認
    5. レビュー依頼前に以下を確認
       - コミットが整理されているか
       - 不要なファイルが含まれていないか
       - テスト、リント、型チェックが通過しているか
       - コードの品質が確保されているか
- PRは小さく保つ
  - 1つのPRで1つの機能や修正を扱う
  - レビューしやすい規模を維持
- PRのレビュー完了後にマージ
  - すべてのCIチェックが通過していることを確認
  - レビューコメントに対応済みであることを確認
  - コンフリクトが解消されていることを確認

## CI/CD
- GitHub Actionsを使用して以下を自動化
  - 型チェック: TypeScriptの型チェック
  - Lint: ESLintによるコード品質チェック
  - Test: テストの実行
  - Build: プロダクションビルドの確認
- PRのマージ前に全てのチェックが通過していることを確認
- CIの実行結果はPRにコメントとして自動的に追加される
- ワークフローファイルは`.github/workflows`に配置
- Node.jsのバージョンは`.tool-versions`で管理
- ワークフロー確認手順
  1. プッシュ後、`gh run list --workflow="PR Check CI" --limit 1` で状態を確認
  2. `sleep 30` コマンドで30秒待機
  3. 再度 `gh run list` で確認
  4. 失敗時は `gh run view` でログを確認して対応
  5. すべてのチェックがパスするまで2-3を繰り返す
  6. 成功したらレビューを依頼
- PRマージ監視手順
  1. レビューを依頼後、以下のコマンドを実行してレビュー状態を確認
     ```bash
     sleep 30 && gh pr view $PR_NUMBER --json reviewDecision -q .reviewDecision
     ```
  2. レビューが承認されていない場合は、再度手順1を実行
  3. レビュー承認後、手動でPRをマージ
  4. マージ後、以下のコマンドを実行してマージ完了を確認
     ```bash
     sleep 30 && gh pr view $PR_NUMBER --json state -q .state
     ```
  5. 状態が`MERGED`でない場合は、再度手順4を実行
  6. 状態が`MERGED`になったら以下を実行
     ```bash
     git switch main && git pull origin main
     ```

## Next.jsアプリケーションルール
- App Router規約に従ったファイル配置
  - ページは`app`ディレクトリ以下に配置
  - レイアウトは`layout.tsx`で定義
  - ページは`page.tsx`で定義
  - ルーティングはディレクトリ構造に従う
- コンポーネント設計
  - 再利用可能なコンポーネントは`components`ディレクトリに配置
  - ページ固有のコンポーネントはそのページのディレクトリに配置
  - コンポーネントは適切に型付けする
- スタイリング
  - Tailwind CSSを使用
  - グローバルスタイルは`globals.css`で管理
  - カスタムスタイルは`