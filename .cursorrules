# プロジェクトルール

## ルールの追加
- 指示された内容は、特に指定がない限り本ファイル（.cursorrules）に追記する
- 拡張子固有のルールは`.cursor/rules`ディレクトリ以下に追記する
- 追記する際は、関連する既存のセクションに追加するか、新しいセクションを作成する
- 追記後は必ずコミットし、CIの成功を確認する
- 手順に修正を加える場合は、必ず関連するルールも更新する
  1. 手順の修正内容を確認
  2. 影響を受けるルールを特定
  3. ルールの更新が必要な場合は、該当セクションを修正
  4. 変更をコミットし、PRを作成
- 手順の誤りが発見された場合の修正プロセス
  1. レビューコメントで指摘された誤りを確認
  2. 修正内容を実装
     - 該当する手順の修正
     - 関連するルールの更新
     - 必要に応じてスクリプトの修正
  3. 修正をコミット
  4. レビューコメントに返信
     - レビューコメントに直接リプライする形式で返信
     - コメントIDを取得
       ```bash
       gh api graphql -f query='
         query($owner: String!, $repo: String!, $pr_number: Int!) {
           repository(owner: $owner, name: $repo) {
             pullRequest(number: $pr_number) {
               reviews(first: 100) {
                 nodes {
                   comments(first: 100) {
                     nodes {
                       id
                       databaseId
                     }
                   }
                 }
               }
             }
           }
         }
       ' -F owner=$OWNER -F repo=$REPO -F pr_number=$PR_NUMBER
       ```
     - リプライを送信（JSONフォーマットで改行を保持）
       ```bash
       echo '{"body": "修正内容の説明\n\n修正コミット: コミットハッシュ"}' | \
       gh api \
         --method POST \
         -H "Accept: application/vnd.github+json" \
         /repos/$OWNER/$REPO/pulls/$PR_NUMBER/comments/$COMMENT_ID/replies \
         --input -
       ```
  5. CIの完了を待って、コメントをresolveに変更
  6. 必要に応じて手順2-5を繰り返す

## プロジェクト概要
- `app`ディレクトリ以下はNext.jsアプリケーション
- App Routerを採用
- TypeScriptとTailwind CSSを使用
- macOS環境を前提とした開発

## Makefileコマンド
- `make init`: プロジェクトの初期化
  - npm installの実行
  - huskyの準備
  - GitHub CLI（gh）のインストール（未インストールの場合）
    - Homebrewを使用してインストール（`brew install gh`）
- `make install`: 依存関係のインストール
- `make dev`: 開発サーバーの起動
- `make build`: プロダクションビルドの実行
- `make test`: テストの実行
- `make lint`: リントの実行
- `make type-check`: 型チェックの実行
- `make clean`: ビルドファイルとキャッシュの削除
- `make help`: 利用可能なコマンドの一覧表示

## Gitルール
- コミットメッセージは Conventional Commits 形式に従う
  - feat: 新機能の追加
  - fix: バグ修正
  - docs: ドキュメントの変更のみ
  - style: コードの意味に影響を与えない変更
  - refactor: バグ修正や機能追加を含まないコードの変更
  - test: テストの追加や既存テストの修正
  - chore: ビルドプロセスやツールの変更
- コミット管理
  - ファイルの変更後は必ずコミットする
  - 作業中は細かくコミットして変更を記録
  - プッシュ前に以下の手順でコミットを整理
    1. `git log`で作業内容を確認
    2. `git rebase -i main`で関連するコミットをまとめる
    3. コミットメッセージを適切に修正
    4. コミットの順序を整理
- 各コミットは単一の責任に焦点を当てる
- 最初のコミットは "first commit" とし、プロジェクトの初期設定を含める
- プッシュ前の確認
  - mainブランチの更新
    1. `git fetch origin main`で最新の情報を取得
    2. `git switch main`でmainブランチに切り替え
    3. `git pull origin main`で最新の変更を取り込む
    4. `git switch -`で作業ブランチに戻る
  - `git diff main`で変更内容を確認
  - 以下の点をチェック
    - 不要なファイルが含まれていないか
    - デバッグコードが残っていないか
    - 機密情報が含まれていないか
    - 意図しない変更が含まれていないか
  - 問題がある場合は適切に対処
    - 不要なファイルは削除またはgitignoreに追加
    - デバッグコードは削除
    - 機密情報は環境変数化
    - 意図しない変更は元に戻す
- Gitフックを使用して品質を担保
  - pre-push: プッシュ前に以下を実行
    - 型チェック
    - リント
    - テスト
    - 差分の確認（対話的に確認を要求）
  - huskyを使用してフックを管理
  - `npm install`時に自動的にフックが設定される

## ブランチ運用とPR
- 新しい作業は必ずブランチを作成して実施
  - 作業開始前に`.work`ディレクトリ以下を掃除
    ```bash
    rm -rf .work/*
    ```
  - ブランチ名は作業内容を表す名前をつける
  - 例: `feature/add-user-auth`, `fix/login-error`
- 作業単位でPRを作成
  - `gh pr create`コマンドを使用
  - PRのタイトルは変更内容を簡潔に表現
  - PRの説明は以下の手順で作成
    1. `.work`ディレクトリを作成（存在しない場合）
    2. PR関連の一時ファイルは`.work`ディレクトリ以下に作成
       - PR説明のドラフト: `.work/pr-draft.md`
       - レビュー時のメモ: `.work/review-notes.md`
       - その他の一時ファイル: `.work/temp-*`
    3. `.github/pull_request_template.md`の内容をベースに、PR固有の内容を記載
    4. `gh pr create --body-file`で一時ファイルを使用してPRを作成
    5. PR作成後も一時ファイルは保持（説明の更新に使用）
  - PRの説明には以下を含める
    - 概要: PRの目的、背景、変更点を簡潔に記載
    - 変更内容: 具体的な変更内容をリストアップ
    - 確認したこと: 動作確認やテストの内容を記載
    - 補足: レビュアーへの注意点や補足事項を記載
  - PRの説明を更新する場合
    1. `.work/pr-draft.md`を編集
    2. `gh pr edit --body-file .work/pr-draft.md`で説明を更新
    3. 更新後、変更をコミットして再度プッシュ
  - PRをマージ可能な状態にする
    1. mainブランチの最新変更を取り込む
       ```bash
       git fetch origin main
       git switch main
       git pull origin main
       git switch -
       git rebase main
       ```
    2. コンフリクトが発生した場合は解消
    3. 変更をプッシュ（必要に応じて`--force-with-lease`を使用）
    4. CIが成功することを確認
    5. レビュー依頼前に以下を確認
       - コミットが整理されているか
       - 不要なファイルが含まれていないか
       - テスト、リント、型チェックが通過しているか
       - コードの品質が確保されているか
- PRは小さく保つ
  - 1つのPRで1つの機能や修正を扱う
  - レビューしやすい規模を維持
- PRのレビュー完了後にマージ
  - すべてのCIチェックが通過していることを確認
  - レビューコメントに対応済みであることを確認
  - コンフリクトが解消されていることを確認
- PRのレビュー対応
  - レビューコメントの監視
    - `./scripts/monitor-pr.sh`を使用
    - 30秒ごとに以下を確認
      - PRの状態（OPEN/MERGED/CLOSED）
      - レビューコメント
      - CIの状態
    - マージ後は自動的にmainブランチに切り替え
  - レビューコメントへの返信
    1. レビューコメントに直接リプライする形式で返信
     - コメントIDを取得
       ```bash
       gh api graphql -f query='
         query($owner: String!, $repo: String!, $pr_number: Int!) {
           repository(owner: $owner, name: $repo) {
             pullRequest(number: $pr_number) {
               reviews(first: 100) {
                 nodes {
                   comments(first: 100) {
                     nodes {
                       id
                       databaseId
                     }
                   }
                 }
               }
             }
           }
         }
       ' -F owner=$OWNER -F repo=$REPO -F pr_number=$PR_NUMBER
       ```
     - リプライを送信（JSONフォーマットで改行を保持）
       ```bash
       echo '{"body": "修正内容の説明\n\n修正コミット: コミットハッシュ"}' | \
       gh api \
         --method POST \
         -H "Accept: application/vnd.github+json" \
         /repos/$OWNER/$REPO/pulls/$PR_NUMBER/comments/$COMMENT_ID/replies \
         --input -
       ```
  3. CIの状態確認
     ```bash
     gh api graphql -f query='
       query($owner: String!, $repo: String!, $pr_number: Int!) {
         repository(owner: $owner, name: $repo) {
           pullRequest(number: $pr_number) {
             commits(last: 1) {
               nodes {
                 commit {
                   statusCheckRollup {
                     state
                   }
                 }
               }
             }
           }
         }
       }
     ' -F owner=$OWNER -F repo=$REPO -F pr_number=$PR_NUMBER
     ```
  4. レビューまたはCIが完了していない場合
     ```bash
     sleep 30
     ```
     その後、手順1-3を再実行
  5. レビューコメントがある場合
     - 修正内容を実装
     - コミットとプッシュ
     - コメントに返信（修正内容とコミットハッシュを含める）
     - CIの完了を待って、コメントをresolveに変更
  6. すべてのチェックが完了するまで3-4を繰り返す
  7. レビューが承認され、CIが成功したら、GitHub Web UIからマージを実行
     - ghコマンド経由でのマージは禁止
     - 必ず手動でマージを実行し、変更内容を最終確認

## CI/CD
- GitHub Actionsを使用して以下を自動化
  - 型チェック: TypeScriptの型チェック
  - Lint: ESLintによるコード品質チェック
  - Test: テストの実行
  - Build: プロダクションビルドの確認
- PRのマージ前に全てのチェックが通過していることを確認
- CIの実行結果はPRにコメントとして自動的に追加される
- ワークフローファイルは`.github/workflows`に配置
- Node.jsのバージョンは`.tool-versions`で管理
- ワークフロー確認手順
  1. プッシュ後、`gh run list --workflow="PR Check CI" --limit 1` で状態を確認
  2. `sleep 30` コマンドで30秒待機
  3. 再度 `gh run list` で確認
  4. 失敗時は `gh run view` でログを確認して対応
  5. すべてのチェックがパスするまで2-3を繰り返す
  6. 成功したらレビューを依頼

## プロジェクト構造
- ファイル構成
  - `app`: Next.jsアプリケーション
  - `.cursor/rules`: 拡張子ごとのルール
  - `.github`: GitHub関連の設定
  - `.work`: 一時ファイル
- 命名規則
  - ディレクトリとファイル名は小文字とハイフンを使用
  - 明確で論理的なディレクトリ構造を維持
  - 関連するファイルは近くに配置
- 設定ファイル
  - ルートディレクトリに配置
  - 目的ごとに適切な名前を付ける
  - 必要に応じてコメントで説明を追加
- `.work`ディレクトリの管理
  - `.gitignore`に追加し、バージョン管理対象外とする
  - 新しい作業を開始する前に中身を掃除する
  - PR中の一時ファイルのみを保持する
  - 作業完了後は中身を掃除する
  - ファイル種類
    - PRのドラフト（`pr-draft.md`）
    - レビュー時のメモ（`review-notes.md`）
    - その他の一時ファイル（`temp-*`）

## 作業手順
- 作業の準備
  1. mainブランチの更新
     ```bash
     git fetch origin main
     git switch main
     git pull origin main
     ```
  2. `.work`ディレクトリの掃除
     ```bash
     rm -rf .work/*
     ```
  3. 作業用ブランチの作成
     - ブランチ名は作業内容を表す名前をつける
     - 例: `feature/add-user-auth`, `fix/login-error`
     ```bash
     git checkout -b <branch-name>
     ```

- 作業の実施
  1. 作業内容の実装
     - 小さな単位で実装
     - 適宜コミットを作成
  2. 動作確認
     - 単体テストの実行
     - リンター/型チェックの実行
     - 手動での動作確認
  3. コミットの整理
     - `git log`で作業内容を確認
     - `git rebase -i main`で関連するコミットをまとめる
     - コミットメッセージを適切に修正

- 作業内容のルールへの反映
  1. 手順の修正内容を確認
  2. 影響を受けるルールを特定
  3. ルールの更新が必要な場合
     - 該当セクションを修正
     - 拡張子固有のルールは`.cursor/rules`以下に配置
     - 関連する既存のセクションに追加または新規セクション作成
  4. 変更をコミット

- レビュー用PRの作成
  1. `.work`ディレクトリの準備
     ```bash
     mkdir -p .work
     ```
  2. PR説明の作成
     - `.work/pr-draft.md`にPR説明を作成
     - `.github/pull_request_template.md`をベースに作成
     - 必要な情報を記載
       - 概要
       - 変更内容
       - 確認したこと
       - 動作確認の内容
       - 補足事項
  3. PRの作成
     ```bash
     gh pr create --title "<title>" --body-file .work/pr-draft.md
     ```

- レビュー用PRの監視および対応
  1. レビューコメントの監視
     ```bash
     ./scripts/monitor-pr.sh
     ```
     - 30秒ごとに以下を確認
       - PRの状態（OPEN/MERGED/CLOSED）
       - レビューコメント
       - CIの状態
     - マージ後は自動的にmainブランチに切り替え
  2. レビューコメントへの返信
     - レビューコメントに直接リプライする形式で返信
     - コメントIDを取得
       ```bash
       gh api graphql -f query='
         query($owner: String!, $repo: String!, $pr_number: Int!) {
           repository(owner: $owner, name: $repo) {
             pullRequest(number: $pr_number) {
               reviews(first: 100) {
                 nodes {
                   comments(first: 100) {
                     nodes {
                       id
                       databaseId
                     }
                   }
                 }
               }
             }
           }
         }
       ' -F owner=$OWNER -F repo=$REPO -F pr_number=$PR_NUMBER
       ```
     - リプライを送信（JSONフォーマットで改行を保持）
       ```bash
       echo '{"body": "修正内容の説明\n\n修正コミット: コミットハッシュ"}' | \
       gh api \
         --method POST \
         -H "Accept: application/vnd.github+json" \
         /repos/$OWNER/$REPO/pulls/$PR_NUMBER/comments/$COMMENT_ID/replies \
         --input -
       ```
  3. CIの状態確認
     ```bash
     gh api graphql -f query='
       query($owner: String!, $repo: String!, $pr_number: Int!) {
         repository(owner: $owner, name: $repo) {
           pullRequest(number: $pr_number) {
             commits(last: 1) {
               nodes {
                 commit {
                   statusCheckRollup {
                     state
                   }
                 }
               }
             }
           }
         }
       }
     ' -F owner=$OWNER -F repo=$REPO -F pr_number=$PR_NUMBER
     ```
  4. レビューまたはCIが完了していない場合
     ```bash
     sleep 30
     ```
     その後、手順1-3を再実行
  5. レビューコメントがある場合
     - 修正内容を実装
     - コミットとプッシュ
     - コメントに返信（修正内容とコミットハッシュを含める）
     - CIの完了を待って、コメントをresolveに変更
  6. すべてのチェックが完了するまで3-4を繰り返す
  7. レビューが承認され、CIが成功したら、GitHub Web UIからマージを実行
     - ghコマンド経由でのマージは禁止
     - 必ず手動でマージを実行し、変更内容を最終確認

- レビュー用PRマージ後の後始末
  1. mainブランチに切り替え
     ```bash
     git switch main
     ```
  2. 最新の変更を取り込む
     ```bash
     git pull origin main
     ```
  3. `.work`ディレクトリの掃除
     ```bash
     rm -rf .work/*
     ```
  4. 作業ブランチの削除
     ```bash
     git branch -d <branch-name>
     ```
