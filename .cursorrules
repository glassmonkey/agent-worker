# プロジェクトルール

## プロジェクト概要
- `app`ディレクトリ以下はNext.jsアプリケーション
  - App Routerを採用
  - TypeScriptとTailwind CSSを使用
  - macOS環境を前提とした開発

## 基本コマンド
- `make init`: プロジェクトの初期化
- `make install`: 依存関係のインストール
- `make dev`: 開発サーバーの起動
- `make build`: プロダクションビルド
- `make test`: テストの実行
- `make lint`: リントの実行
- `make type-check`: 型チェックの実行
- `make clean`: ビルドファイルとキャッシュの削除

## 作業の基本ルール
- 作業はすべて作業用ブランチで実施
- ファイル変更後は自動的にコミット、プッシュを実行
- コミットメッセージは Conventional Commits 形式に従う
  - feat: 新機能
  - fix: バグ修正
  - docs: ドキュメント変更
  - style: 見た目のみの変更
  - refactor: リファクタリング
  - test: テスト関連
  - chore: その他

## PRの作成と管理
- PRの説明は`.work/pr-draft.md`に作成
  - 概要: 目的と背景
  - 変更内容: 具体的な変更点
  - 確認項目: テストと動作確認結果
  - 補足事項: レビュアーへの注意点
- マージは一律禁止

## ファイル構成
- `app`: Next.jsアプリケーション
- `.cursor/rules`: 拡張子別のルール
- `.github`: GitHub関連設定
- `.work`: 一時ファイル（PR作成時の下書き等）

## CI/CD
- GitHub Actionsで以下を自動化
  - 型チェック
  - リント
  - テスト
  - ビルド

## Gitルール
- コミットメッセージは Conventional Commits 形式に従う
  - feat: 新機能の追加
  - fix: バグ修正
  - docs: ドキュメントの変更のみ
  - style: コードの意味に影響を与えない変更
  - refactor: バグ修正や機能追加を含まないコードの変更
  - test: テストの追加や既存テストの修正
  - chore: ビルドプロセスやツールの変更
- コミット管理
  - ファイルの変更後は指示を待たずに必ずコミットする
  - コミット後は指示を待たずに必ずプッシュする
  - 作業中は細かくコミットして変更を記録
  - プッシュ前に以下の手順でコミットを整理
    1. `git log`で作業内容を確認
    2. `git rebase -i main`で関連するコミットをまとめる
    3. コミットメッセージを適切に修正
    4. コミットの順序を整理
- 各コミットは単一の責任に焦点を当てる
- 最初のコミットは "first commit" とし、プロジェクトの初期設定を含める
- プッシュ前の確認
  - mainブランチの更新
    1. `git fetch origin main`で最新の情報を取得
    2. `git switch main`でmainブランチに切り替え
    3. `git pull origin main`で最新の変更を取り込む
    4. `git switch -`で作業ブランチに戻る
  - `git diff main`で変更内容を確認
  - 以下の点をチェック
    - 不要なファイルが含まれていないか
    - デバッグコードが残っていないか
    - 機密情報が含まれていないか
    - 意図しない変更が含まれていないか
  - 問題がある場合は適切に対処
    - 不要なファイルは削除またはgitignoreに追加
    - デバッグコードは削除
    - 機密情報は環境変数化
    - 意図しない変更は元に戻す
- Gitフックを使用して品質を担保
  - pre-push: プッシュ前に以下を実行
    - 型チェック
    - リント
    - テスト
    - 差分の確認（対話的に確認を要求）
  - huskyを使用してフックを管理
  - `npm install`時に自動的にフックが設定される