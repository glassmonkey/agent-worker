# プロジェクトルール

## ルールの追加
- ルールを追加する手順
  1. 追加するルールの内容を確認
  2. 追加先の決定
     - 特に指定がない限り、`.cursorrules`に追加
     - 拡張子固有のルールは`.cursor/rules`以下に配置
  3. 追加方法の選択
     - 既存のセクションに関連する内容の場合は、そのセクションに追加
     - 新しいセクションが必要な場合は、適切な見出しレベルで作成
  4. 変更をコミットしてCIの成功を確認

- ルールを修正する手順
  1. 修正の必要性を確認
     - レビューコメントで指摘された誤り
     - 作業中に発見された問題
     - 新しい指示や要件の追加
  2. 修正内容を実装
     - バックアップファイルの作成
       ```bash
       cp <target_file> <target_file>.bak
       ```
     - バックアップファイルを編集して修正内容を実装
     - 修正内容の確認後、バックアップファイルを元のファイルに上書き
       ```bash
       mv <target_file>.bak <target_file>
       ```
     - 関連するルールの更新
     - 必要に応じてスクリプトの修正
  3. 修正をコミット
     - ルールの変更後は指示を待たずに必ずコミットする
     - コミットメッセージは変更内容を明確に説明する
       - 例: "docs: add rule for automatic commit after rule modification"
  4. フィードバックへの対応
     - レビューコメントの場合
       1. `make reply-to-review comment_id=<comment_id> message="<message>"`でコメントに返信
       2. CIの完了を待って、コメントをresolveに変更
     - 指示の場合
       1. 指示の内容と対応結果を記録
       2. 必要に応じて追加の修正を実施
  5. CIの完了を待って、変更の確認
  6. 必要に応じて手順2-5を繰り返す

## プロジェクト概要
- `app`ディレクトリ以下はNext.jsアプリケーション
- App Routerを採用
- TypeScriptとTailwind CSSを使用
- macOS環境を前提とした開発

## Makefileコマンド
- `make init`: プロジェクトの初期化
  - npm installの実行
  - huskyの準備
  - GitHub CLI（gh）のインストール（未インストールの場合）
    - Homebrewを使用してインストール（`brew install gh`）
- `make install`: 依存関係のインストール
- `make dev`: 開発サーバーの起動
- `make build`: プロダクションビルドの実行
- `make test`: テストの実行
- `make lint`: リントの実行
- `make type-check`: 型チェックの実行
- `make clean`: ビルドファイルとキャッシュの削除
- `make help`: 利用可能なコマンドの一覧表示

## Gitルール
- コミットメッセージは Conventional Commits 形式に従う
  - feat: 新機能の追加
  - fix: バグ修正
  - docs: ドキュメントの変更のみ
  - style: コードの意味に影響を与えない変更
  - refactor: バグ修正や機能追加を含まないコードの変更
  - test: テストの追加や既存テストの修正
  - chore: ビルドプロセスやツールの変更
- コミット管理
  - ファイルの変更後は指示を待たずに必ずコミットする
  - コミット後は指示を待たずに必ずプッシュする
  - プッシュ後は指示を待たずに必ず`make monitor-pr`でPRの状態監視を開始する
  - 作業中は細かくコミットして変更を記録
  - プッシュ前に以下の手順でコミットを整理
    1. `git log`で作業内容を確認
    2. `git rebase -i main`で関連するコミットをまとめる
    3. コミットメッセージを適切に修正
    4. コミットの順序を整理
- 各コミットは単一の責任に焦点を当てる
- 最初のコミットは "first commit" とし、プロジェクトの初期設定を含める
- プッシュ前の確認
  - mainブランチの更新
    1. `git fetch origin main`で最新の情報を取得
    2. `git switch main`でmainブランチに切り替え
    3. `git pull origin main`で最新の変更を取り込む
    4. `git switch -`で作業ブランチに戻る
  - `git diff main`で変更内容を確認
  - 以下の点をチェック
    - 不要なファイルが含まれていないか
    - デバッグコードが残っていないか
    - 機密情報が含まれていないか
    - 意図しない変更が含まれていないか
  - 問題がある場合は適切に対処
    - 不要なファイルは削除またはgitignoreに追加
    - デバッグコードは削除
    - 機密情報は環境変数化
    - 意図しない変更は元に戻す
- 作業内容の提出
  1. `make submit-work title="<pr-title>"`を実行
     - 未コミットの変更がないことを確認
     - 変更をプッシュ
     - PRを作成
     - PRの状態監視を自動的に開始
  2. 必要に応じてレビューコメントに対応
     - プッシュ後は自動的に`make monitor-pr`でPRの状態監視を再開
- Gitフックを使用して品質を担保
  - pre-push: プッシュ前に以下を実行
    - 型チェック
    - リント
    - テスト
    - 差分の確認（対話的に確認を要求）
  - huskyを使用してフックを管理
  - `npm install`時に自動的にフックが設定される

## ブランチ運用とPR
- 新しい作業は必ずブランチを作成して実施
  - 作業開始前に`.work`ディレクトリ以下を掃除
    ```bash
    rm -rf .work/*
    ```
  - ブランチ名は作業内容を表す名前をつける
  - 例: `feature/add-user-auth`, `fix/login-error`
- 作業単位でPRを作成
  - `gh pr create`コマンドを使用
  - PRのタイトルは変更内容を簡潔に表現
  - PRの説明は以下の手順で作成
    1. `.work`ディレクトリを作成（存在しない場合）
       ```bash
       mkdir -p .work
       ```
    2. PR関連の一時ファイルは`.work`ディレクトリ以下に作成
       - PR説明のドラフト: `.work/pr-draft.md`
       - レビュー時のメモ: `.work/review-notes.md`
       - その他の一時ファイル: `.work/temp-*`
    3. `.github/pull_request_template.md`の内容をベースに、PR固有の内容を記載
    4. PR説明の表示を確認
       ```bash
       cat .work/pr-draft.md
       ```
       - 表示が崩れていないことを確認
       - 見出しや箇条書きが正しく表示されることを確認
       - コードブロックが正しく表示されることを確認
    5. 必要に応じてPR説明を修正
       - 見出しの前後に空行を入れる
       - 箇条書きのインデントを揃える
       - コードブロックの前後に空行を入れる
    6. `gh pr create --body-file .work/pr-draft.md`で一時ファイルを使用してPRを作成
    7. PR作成後も一時ファイルは保持（説明の更新に使用）
  - PRの説明には以下を含める
    - 概要: PRの目的、背景、変更点を簡潔に記載
    - 変更内容: 具体的な変更内容をリストアップ
    - 確認したこと: 動作確認やテストの内容を記載
    - 補足: レビュアーへの注意点や補足事項を記載
  - PRの説明を更新する場合
    1. `.work/pr-draft.md`を編集
    2. PR説明の表示を確認
       ```bash
       cat .work/pr-draft.md
       ```
    3. `gh pr edit --body-file .work/pr-draft.md`で説明を更新
    4. 更新後、変更をコミットして再度プッシュ
  - PRをマージ可能な状態にする
    1. mainブランチの最新変更を取り込む
       ```bash
       git fetch origin main
       git switch main
       git pull origin main
       git switch -
       git rebase main
       ```
    2. コンフリクトが発生した場合は解消
    3. 変更をプッシュ（必要に応じて`--force-with-lease`を使用）
    4. CIが成功することを確認
    5. レビュー依頼前に以下を確認
       - コミットが整理されているか
       - 不要なファイルが含まれていないか
       - テスト、リント、型チェックが通過しているか
       - コードの品質が確保されているか
- PRは小さく保つ
  - 1つのPRで1つの機能や修正を扱う
  - レビューしやすい規模を維持
- PRのレビュー完了後にマージ
  - すべてのCIチェックが通過していることを確認
  - レビューコメントに対応済みであることを確認
  - コンフリクトが解消されていることを確認
  - マージの実行
    - LGTMコメントがある場合:
      - 最新のLGTMコメント以降のコミットがある場合はLGTMコメントを無視
      - 最新のLGTMコメント以降のコミットがない場合は`gh pr merge --squash --delete-branch --auto`コマンドでマージを実行し、その後`make finish-work`を実行
    - マージ前に変更内容を最終確認
    - マージ後、`make finish-work`で後処理を実行
      - `.work`ディレクトリの掃除
      - mainブランチへの切り替え
      - 作業ブランチの削除

## PR作成手順
- PR説明の作成
  1. PR説明のドラフトを作成
     ```bash
     echo '# <PRのタイトル>\n\n## 概要\n<PRの目的や背景を簡潔に記載>\n\n## 変更内容\n- <主な変更点1>\n  - <詳細1>\n  - <詳細2>\n- <主な変更点2>\n  - <詳細1>\n  - <詳細2>\n\n## 確認したこと\n- <確認項目1>\n- <確認項目2>\n\n## 動作確認の内容\n- <動作確認手順や結果>\n\n## 補足事項\n- <補足情報1>\n- <補足情報2>\n' > .work/pr-draft.md
     ```
  2. PR説明の表示を確認
     ```bash
     cat .work/pr-draft.md
     ```
     - 表示が崩れていないことを確認
       - 見出しの前後に空行があること
       - 箇条書きのインデントが揃っていること
       - コードブロックの前後に空行があること
  3. 必要に応じて修正
     ```bash
     echo '修正後の内容' > .work/pr-draft.md
     ```
  4. 再度表示を確認
     ```bash
     cat .work/pr-draft.md
     ```

- PR説明の更新
  1. PR説明の修正
     ```bash
     echo '更新後の内容' > .work/pr-draft.md
     ```
  2. 表示の確認
     ```bash
     cat .work/pr-draft.md
     ```
  3. PRの更新
     ```bash
     gh pr edit --body-file .work/pr-draft.md
     ```

- PR説明の記載内容
  - 見出し構成
    ```markdown
    # <PRのタイトル>

    ## 概要
    <PRの目的や背景を簡潔に記載>

    ## 変更内容
    - <主な変更点>
      - <詳細な変更内容>

    ## 確認したこと
    - <確認項目>

    ## 動作確認の内容
    - <動作確認手順や結果>

    ## 補足事項
    - <補足情報>
    ```
  - 各セクションの記載方法
    - タイトル: 変更の種類とスコープを簡潔に表現
    - 概要: 2-3行で変更の目的と内容を説明
    - 変更内容: 箇条書きで具体的な変更を列挙
    - 確認したこと: テストや動作確認の結果を記載
    - 動作確認の内容: 実施した確認手順と結果を記載
    - 補足事項: レビュアーへの注意点や追加情報を記載

## PRのマージ
- マージ方法
  - スカッシュマージを使用
    ```bash
    gh pr merge <pr-number> --squash --delete-branch
    ```
  - 対話処理を避けるため、オプションを明示的に指定
  - 作業ブランチは自動的に削除
- マージの実行
  1. CIチェックの成功を確認
  2. レビューコメントの対応完了を確認
  3. LGTMコメントの確認
  4. マージコマンドの実行
  5. 後処理の実行
     ```bash
     make finish-work title="<pr-title>"
     ```

## CI/CD
- GitHub Actionsを使用して以下を自動化
  - 型チェック: TypeScriptの型チェック
  - Lint: ESLintによるコード品質チェック
  - Test: テストの実行
  - Build: プロダクションビルドの確認
- PRのマージ前に全てのチェックが通過していることを確認
- CIの実行結果はPRにコメントとして自動的に追加される
- ワークフローファイルは`.github/workflows`に配置
- Node.jsのバージョンは`.tool-versions`で管理

## プロジェクト構造
- ファイル構成
  - `app`: Next.jsアプリケーション
  - `.cursor/rules`: 拡張子ごとのルール
  - `.github`: GitHub関連の設定
  - `.work`: 一時ファイル
- 命名規則
  - ディレクトリとファイル名は小文字とハイフンを使用
  - 明確で論理的なディレクトリ構造を維持
  - 関連するファイルは近くに配置
- 設定ファイル
  - ルートディレクトリに配置
  - 目的ごとに適切な名前を付ける
  - 必要に応じてコメントで説明を追加
- `.work`ディレクトリの管理
  - `.gitignore`に追加し、バージョン管理対象外とする
  - 新しい作業を開始する前に中身を掃除する
  - PR中の一時ファイルのみを保持する
  - 作業完了後は中身を掃除する
  - ファイル種類
    - PRのドラフト（`pr-draft.md`）
    - レビュー時のメモ（`review-notes.md`）
    - その他の一時ファイル（`temp-*`）

## 作業の定義
- 作業とは以下の条件のいずれかに該当する変更を指す
  - ファイルの追加、修正、削除
  - コミットの作成
  - プッシュ
  - PRの作成や更新
  - レビューコメントへの対応
- 作業は必ず作業用ブランチで行う
  - mainブランチでは作業を行わない
  - mainブランチでは以下の操作のみ許可
    - ブランチの切り替え（`git switch main`）
    - リモートの変更の取り込み（`git pull origin main`）
    - 作業ブランチの作成（`git switch -c <branch-name>`）
  - mainブランチでの禁止操作
    - ファイルの変更
    - コミットの作成
    - プッシュ
    - マージ（PRを通さないマージ）
- 作業の開始と終了
  - 開始時
    1. `make start-work branch=<branch-name>`を実行
    2. 作業用ブランチが作成される
    3. `.work`ディレクトリが初期化される
  - 終了時
    1. 変更がコミットされていることを確認
    2. `make submit-work title="<pr-title>"`を実行
    3. PRが作成される
    4. レビュー完了後、`gh pr merge`でマージ
    5. `make finish-work`で後処理を実行

## 作業手順
- 作業の準備
  1. 作業を開始する
     ```bash
     make start-work branch=<branch-name>
     ```
     - ブランチ名は作業内容を表す名前をつける
     - 例: `feature/add-user-auth`, `fix/login-error`
     - このコマンドは以下を自動的に実行
       - mainブランチの更新
       - `.work`ディレクトリの掃除
       - 作業用ブランチの作成
       - PR下書きの準備

- 作業の実施
  1. 作業内容の実装
     - 小さな単位で実装
     - ファイルの変更後は指示を待たずに必ずコミットする
  2. 動作確認
     - 単体テストの実行
     - リンター/型チェックの実行
     - 手動での動作確認
  3. コミットの整理
     - `git log`で作業内容を確認
     - `git rebase -i main`で関連するコミットをまとめる
     - コミットメッセージを適切に修正

- 作業内容のルールへの反映
  1. 手順の修正内容を確認
  2. 影響を受けるルールを特定
  3. ルールの更新が必要な場合
     - 該当セクションを修正
     - 拡張子固有のルールは`.cursor/rules`以下に配置
     - 関連する既存のセクションに追加または新規セクション作成
  4. 変更をコミット
     - ルールの変更後は指示を待たずに必ずコミットする
     - コミットメッセージは変更内容を明確に説明する
       - 例: "docs: update workflow rules for PR monitoring"
     - コミット後は指示を待たずに必ずプッシュする
     - プッシュ後は指示を待たずに必ず`make monitor-pr`でPRの状態監視を開始する

- レビュー用PRの作成
  1. `.work`ディレクトリの準備
     ```bash
     mkdir -p .work
     ```
  2. PR説明の作成
     - `.work/pr-draft.md`にPR説明を作成
     - `.github/pull_request_template.md`をベースに作成
     - 必要な情報を記載
       - 概要
       - 変更内容
       - 確認したこと
       - 動作確認の内容
       - 補足事項
  3. PRの作成
     ```bash
     make submit-work title="<pr-title>"
     ```
     - このコマンドは以下を自動的に実行
       - 変更の確認（未コミットの変更がないことを確認）
       - PRの作成（`--repo`オプションを使用して対話をスキップ）

- レビュー用PRの監視および対応
  1. レビューコメントとCIの監視
     ```bash
     make monitor-pr
     ```
     - 終了コードで状態を確認
       - 0: すべてのチェックが通過し、マージ可能
       - 1: CIが失敗
       - 2: 未解決のレビューコメントあり
       - 3: コンフリクトあり
       - 4: その他のエラー
     - 状態に応じて適切な対応を実施
       - CIが失敗: ログを確認して修正
       - 未解決のコメント: コメントの内容を確認して対応
       - コンフリクト: マージ先ブランチの変更を取り込んで解消
       - LGTMコメントがある場合:
         - 最新のLGTMコメント以降のコミットがある場合はLGTMコメントを無視
         - 最新のLGTMコメント以降のコミットがない場合は`gh pr merge --squash --delete-branch --auto`コマンドでマージを実行し、その後`make finish-work`を実行
       - マージ後は自動的にmainブランチに切り替え
  2. レビューコメントへの対応
     - 修正が必要な場合
       1. 修正内容を実装
       2. コミットとプッシュ
          - プッシュ後は自動的に`make monitor-pr`でPRの状態監視を再開
       3. `make reply-to-review comment_id=<comment_id> message="<message>" include_commit=true`でコメントに返信
          - 修正を行った場合は必ず`include_commit=true`を指定
          - コミットリンクが自動的に追加される
       4. CIの完了を待って、コメントをresolveに変更
       - 既存機能の説明が必要な場合
         1. `make reply-to-review comment_id=<comment_id> message="<message>" include_commit=false`で説明を返信
            - 既存機能の説明の場合は必ず`include_commit=false`を指定
            - コミットリンクは追加されない
         2. コメントをresolveに変更
       - レビュー完了の確認
         - すべてのコメントがresolveされていることを確認
         - CIが成功していることを確認
         - コンフリクトが解消されていることを確認
         - マージの実行
           - LGTMコメントがある場合:
             - 最新のLGTMコメント以降のコミットがある場合はLGTMコメントを無視
             - 最新のLGTMコメント以降のコミットがない場合は`gh pr merge --squash --delete-branch --auto`コマンドでマージを実行し、その後`make finish-work`を実行
           - マージ前に変更内容を最終確認
           - マージ後、`make finish-work`で後処理を実行
             - `.work`ディレクトリの掃除
             - mainブランチへの切り替え
             - 作業ブランチの削除
           - 監視の継続
             - マージやクローズまで指示を待たずに`make monitor-pr`を継続実行
             - エラーが発生した場合は、エラーを修正後に監視を再開