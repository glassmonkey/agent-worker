# Cursor Rules

ルールに記載の指定がない場合は.cursorruleに追記しないでください。

## ドキュメント生成ルール

指示をされた場合docディレクトリ以下に指示内容に応じてドキュメントファイルを生成してください。
似た内容があると判断した場合は編集を行ってください。

ドキュメントの配置場所は以下のディレクトリ構造に従ってください：

```
doc/
├── README.md        # ドキュメント管理の説明
├── specifications/  # 仕様書関連のドキュメント
├── guides/         # ユーザーガイドやマニュアル
└── api/            # API関連のドキュメント
```

### ドキュメント作成時の注意事項

1. Markdown形式で作成すること
2. ファイル名は英数字とハイフン（-）を使用すること
3. 日本語のドキュメントは末尾に `-ja.md` を付けること
4. 既存の類似ドキュメントがある場合は更新を優先すること 

## Git操作ルール

### ブランチ管理
* mainブランチで指示があった場合指示内容に応じて新しくブランチを作成し、checkoutを行う。mainブランチ上でコード改変を含めて、git操作を行うことも禁止です。
* ブランチ名は以下の命名規則に従うこと：
  * 機能追加: `feat/機能名`
  * バグ修正: `fix/修正内容`
  * ドキュメント: `docs/内容`
  * リファクタリング: `refactor/内容`
  * テスト追加・修正: `test/内容`
* mainブランチから新規ブランチを作成する際は、以下の手順を必ず実施すること：
  1. 現在のブランチを確認（`git branch --show-current`）
  2. mainブランチに移動（`git checkout main`）
  3. リモートの最新変更を取得（`git fetch origin main`）
  4. ローカルのmainブランチを最新に更新（`git pull --rebase origin main`）
  5. 新規ブランチを作成（`git checkout -b <branch-name>`）
  6. 作業ブランチに切り替わっていることを確認
* 作業開始前に必ず以下を確認すること：
  1. 現在のブランチがmainでないこと
  2. 作業ブランチが最新のmainから作成されていること

### コミット管理
* 指示内容に応じてコード改変を行いcommitを実施する。commitの粒度はconversional commitに準拠する。
* 作業完了の指示があるまで同一ブランチ上で作業をおこなってください。
* レビュー指摘事項の修正は、新しいブランチを作成せず、同一ブランチ上で修正を続けること。
* コミットメッセージは以下の形式に従うこと：
  ```
  <type>(<scope>): <description>

  [optional body]

  [optional footer]
  ```
  - type: feat, fix, docs, style, refactor, test, chore のいずれか
  - scope: 変更の範囲（オプション）
  - description: 変更内容の要約（命令形で）
  - body: 変更の詳細な説明（オプション）
  - footer: Breaking changes や Issue への参照（オプション）
* 全てのコード変更は必ずcommitすること

### テストコード管理
* 開発はTDD（テスト駆動開発）のサイクルに従って進めること：
  1. Red: 失敗するテストを書く
     * 新機能の仕様を反映したテストを作成
     * この時点でテストは失敗する状態であることを確認
  2. Green: テストが通るように最小限の実装を行う
     * テストをパスさせるための必要最小限のコードを実装
     * この段階では実装の美しさは二の次
  3. Refactor: リファクタリングを行う
     * テストが通る状態を保ちながらコードを改善
     * 可読性、保守性、パフォーマンスを考慮
* テストコードは以下の基準に従うこと：
  * 機能の仕様を正確に反映したテストケースを作成
  * 正常系と異常系の両方のケースを考慮
  * エッジケースを適切にカバー
  * テストコードの可読性と保守性を確保
  * テストの意図が明確になるよう、テスト名と構造を工夫する
* テストの種類に応じて適切な配置場所を選択すること：
  * ユニットテスト: 対象ファイルと同じディレクトリに `*.test.*` または `*_test.*` として配置
  * 統合テスト: `tests/integration/` または適切なディレクトリに配置
  * E2Eテスト: `tests/e2e/` または適切なディレクトリに配置
* テストコードの変更も通常のコード変更と同様にバージョン管理すること
* 各コミットの時点でテストが全て通過していることを確認すること

### 品質管理
* 作業完了の指示があった場合、testやlintを通るするように修正してください。指示内容に応じてアドホックな動作確認もしてください。

### コミット整理とPR作成
* testやlintが通るようになったらブランチ上のcommitを整理する。似たようなcommitや手戻りのあったcommitはひとまとめにするといった形にする。
* commitの整理が完了したらpushをする。
* pushをしたらPRをghコマンドを使って作成する。
* PRの作成手順は以下の通り：
  1. PR本文を`.work/pr_body.txt`に作成する
     * `printf`コマンドを使用して作成する
     * 改行は`\n`で表現する
     * 例：
       ```bash
       printf "# 概要\n\n変更内容の概要を記載\n\n# 確認したこと\n\n- 確認項目1\n- 確認項目2\n\n# その他共有すべき特記事項\n\n特になし" > .work/pr_body.txt
       ```
     * 長文の場合は一時的なファイルを作成し、`cat`コマンドでリダイレクトすることも可能
       ```bash
       cat << 'EOF' > .work/pr_body.txt
       # 概要

       変更内容の概要を記載

       # 確認したこと

       - 確認項目1
       - 確認項目2

       # その他共有すべき特記事項

       特になし
       EOF
       ```
  2. 新規PRの場合は`make pr-create`を実行
  3. 既存PRの編集の場合は`make pr-edit PR_NUMBER=<PR番号>`を実行
  4. 作業完了後、`make pr-clean`で一時ファイルを削除
* PRの説明文は以下のフォーマットに従うこと：
  ```markdown
  # 概要

  変更内容の概要を記載

  # 確認したこと

  - 動作確認や品質確認の内容を記載（箇条書き）

  # その他共有すべき特記事項

  レビュアーに共有すべき事項や注意点を記載
  ```
  - 各セクション間は空行を入れること
  - 確認事項は箇条書きで記載すること
  - 特記事項がない場合は「特になし」と記載すること
  - gh prコマンドで作成する場合は、シングルクォート（`'`）で囲み、改行は`\n`で表現すること 