# Next.jsアプリケーションルール

## ルールの追加
- 指示された内容は、特に指定がない限り本ファイル（.cursorrules）に追記する
- 追記する際は、関連する既存のセクションに追加するか、新しいセクションを作成する
- 追記後は必ずコミットし、CIの成功を確認する

## プロジェクト概要
- App Routerを採用したNext.jsアプリケーション
- TypeScriptとTailwind CSSを使用
- macOS環境を前提とした開発

## ディレクトリ構造
- `src`ディレクトリ以下に全てのソースコードを配置
  - `app`: App Router用のページとレイアウト
  - `components`: 再利用可能なコンポーネント
  - `lib`: ユーティリティ関数やヘルパー
  - `types`: TypeScript型定義
  - `styles`: グローバルスタイルとテーマ設定

## コンポーネント設計
- 再利用可能なコンポーネントは`components`ディレクトリに配置
  - 複数のページで使用するコンポーネント
  - 汎用的なUI要素
  - 共通のレイアウト要素
- ページ固有のコンポーネントはそのページのディレクトリに配置
  - ページ専用のコンポーネント
  - ページ固有のレイアウト
  - ページ固有のフォーム
- コンポーネントの命名規則
  - パスカルケースを使用（例: `Button.tsx`, `UserProfile.tsx`）
  - 明確で説明的な名前を使用
  - 接尾辞でコンポーネントの種類を示す（例: `Page`, `Layout`, `Form`）
- コンポーネントの実装
  - 適切に型付けする
  - propsのインターフェースを定義
  - 必要に応じてJSDOCコメントを追加
  - テストファイルを作成（`*.test.tsx`）

## ルーティング
- App Router規約に従ったファイル配置
  - `page.tsx`: ページコンポーネント
  - `layout.tsx`: レイアウトコンポーネント
  - `loading.tsx`: ローディング状態
  - `error.tsx`: エラー状態
  - `not-found.tsx`: 404ページ
- 動的ルーティング
  - `[id]`形式でパラメータを定義
  - `[...slug]`形式でキャッチオールルートを定義
- グループ化
  - `(group)`形式でルートグループを定義
  - URLには影響しないグループ化に使用

## スタイリング
- Tailwind CSSを使用
  - ユーティリティファーストのアプローチを採用
  - カスタムクラスは最小限に抑える
- グローバルスタイル
  - `globals.css`で管理
  - 基本的なリセットとデフォルトスタイル
  - カラーテーマとタイポグラフィ
- カスタマイズ
  - `tailwind.config.ts`で定義
  - プロジェクト固有の設定を追加
  - 一貫性のあるデザインシステムを維持

## パフォーマンス最適化
- 画像最適化
  - `next/image`を使用
  - 適切なサイズと形式を指定
  - プレースホルダーを設定
- リンク最適化
  - `next/link`を使用
  - プリフェッチを活用
- コード分割
  - 動的インポートを使用
  - ルートごとのコード分割
  - 大きなコンポーネントは必要に応じて分割

## 状態管理
- サーバーコンポーネントを優先的に使用
  - データフェッチ
  - SEO対応
  - 初期表示の最適化
- クライアントコンポーネント
  - 'use client'ディレクティブを明示
  - インタラクティブな機能に使用
  - イベントハンドリング
- 状態管理ライブラリ
  - 必要な場合のみ使用
  - プロバイダーを適切に配置
  - 状態の永続化を考慮

## テスト
- ユニットテスト
  - Jestを使用
  - コンポーネントごとにテストファイルを作成
  - 主要な機能をカバー
- インテグレーションテスト
  - Testing Libraryを使用
  - ユーザーの操作フローをテスト
  - 主要なページをカバー
- E2Eテスト
  - 必要に応じてPlaywrightを使用
  - クリティカルなパスをテスト
  - 本番環境に近い環境でテスト

## 開発プロセス
- 開発サーバー
  - `npm run dev`で起動
  - Turbopackを使用
  - ホットリロードを活用
- ビルド
  - `npm run build`で実行
  - 本番用の最適化を実施
  - パフォーマンスを確認
- デプロイ
  - Vercelを推奨
  - 環境変数を適切に設定
  - デプロイプレビューを活用 