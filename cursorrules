# プロジェクトルール

## プロジェクト概要
- `app`ディレクトリ以下はNext.jsアプリケーション
- App Routerを採用
- TypeScriptとTailwind CSSを使用

## Gitルール
- コミットメッセージは Conventional Commits 形式に従う
  - feat: 新機能の追加
  - fix: バグ修正
  - docs: ドキュメントの変更のみ
  - style: コードの意味に影響を与えない変更
  - refactor: バグ修正や機能追加を含まないコードの変更
  - test: テストの追加や既存テストの修正
  - chore: ビルドプロセスやツールの変更
- 各コミットは単一の責任に焦点を当てる

## Next.jsアプリケーションルール
- App Router規約に従ったファイル配置
  - ページは`app`ディレクトリ以下に配置
  - レイアウトは`layout.tsx`で定義
  - ページは`page.tsx`で定義
  - ルーティングはディレクトリ構造に従う
- コンポーネント設計
  - 再利用可能なコンポーネントは`components`ディレクトリに配置
  - ページ固有のコンポーネントはそのページのディレクトリに配置
  - コンポーネントは適切に型付けする
- スタイリング
  - Tailwind CSSを使用
  - グローバルスタイルは`globals.css`で管理
  - カスタムスタイルは`tailwind.config.ts`で定義
- 状態管理
  - サーバーコンポーネントを優先的に使用
  - クライアントコンポーネントは'use client'ディレクティブを明示
  - 状態管理ライブラリを使用する場合は、プロバイダーを適切に配置
- パフォーマンス
  - 画像は`next/image`を使用
  - リンクは`next/link`を使用
  - 適切なキャッシュ戦略を実装
  - 大きなコンポーネントは必要に応じて動的インポート

## コードスタイル
- 一貫したインデント（タブよりスペースを推奨）
- 1行は120文字以内に収める
- 末尾の空白を削除する
- ファイルの末尾には改行を入れる
- 変数、関数、クラスには意味のある分かりやすい名前を使用する

## プロジェクト構造
- 関連するファイルは近くに配置する
- ディレクトリとファイル名は小文字とハイフンを使用する
- 明確で論理的なディレクトリ構造を維持する
- 設定ファイルはルートディレクトリに配置する

## バージョン管理
- .gitignoreで不要なファイルを除外する
- 依存関係は最新の状態を保つ
- 依存関係のバージョンは固定する

## ドキュメント
- README.mdは常に最新の状態を保つ
- 複雑なロジックや重要な決定事項を文書化する
- README.mdにセットアップ手順を含める
- 環境要件を文書化する

## テスト
- 新機能にはテストを書く
- 既存のテストを維持する
- コミット前にテストを実行する

## コードレビュー
- マージ前にコードレビューを行う
- レビューコメントに対応する
- プルリクエストは焦点を絞り、管理可能なサイズに保つ

## 開発環境
- バージョン管理には.tool-versionsを使用する
- 必要なツールとバージョンを文書化する
- 開発環境のセットアップ手順を最新に保つ 