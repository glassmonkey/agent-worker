---
description: 一時ファイルの管理に関するルールを定義します
globs: [".work/*", ".gitignore"]
---

# 一時ファイル管理ルール

## 1. 目的

本ルールは以下の目的のために定義されています：

1. 一時ファイルの管理
   - 作業用ファイルの整理
   - 不要なファイルのバージョン管理除外
   - クリーンアップの自動化

2. 作業環境の標準化
   - 一時ファイルの配置場所の統一
   - 命名規則の統一
   - クリーンアップ手順の標準化

## 一時ファイルの管理

### 配置場所

1. 全ての一時ファイルは`.work`ディレクトリ以下に配置すること
   - 作業用一時ファイル: `.work/temp/` 以下
     * PR説明文: `pr_description.md`
     * その他の一時ファイル
   - ドラフト: `.work/drafts/` 以下
     * PR下書き: `pr-draft.md`
     * その他の下書きファイル

2. ディレクトリ構造
   ```
   .work/
   ├── temp/               # 一時的な作業ファイル
   │   ├── pr_description.md # PR説明文の一時ファイル
   │   └── <その他の作業用一時ファイル>
   └── drafts/             # 下書きファイル
       ├── pr-draft.md     # PR下書き
       └── <その他の下書きファイル>
   ```

注: テンプレートファイルは`.github/templates/`以下に配置され、バージョン管理されます：
- PRテンプレート: `.github/pull_request_template.md`
- Issueテンプレート: `.github/templates/issue_template.md`

### 命名規則

1. ファイル名は英数字とハイフン（-）、アンダースコア（_）のみを使用
2. 作業内容が分かる名前を付ける
3. 一時的な性質が分かるような接尾辞を付ける（例：`-draft`, `-temp`）

### 関連issueの命名規則

1. タイトルは日本語で記述し、内容が明確に分かるようにする
2. 形式：`<目的>：<具体的な内容>`
   例：
   - "一時ファイル管理の自動化：ghコマンドのエイリアス作成"
   - "テンプレートの保存場所を.githubディレクトリに統一"
   - "一時ファイル管理ルールの重複記述を整理"

### Gitでの管理

1. `.work`ディレクトリ全体を`.gitignore`に記載
2. IDE固有の一時ファイルも`.gitignore`に記載
   - `.vscode/`
   - `.idea/`
   - `*.swp`
   - `*.swo`

## クリーンアップ

### クリーンアップのタイミング

1. 作業開始時
   - `make start-work`実行時に`make pr-clean`を実行

2. PR作成完了時
   - `make pr-clean`を実行して一時ファイルを削除

3. 作業完了時
   - `make finish-work`実行時に`make pr-clean`を実行

### クリーンアップ手順

1. 全ての一時ファイルの削除
   ```bash
   make pr-clean  # 一時ファイルを削除
   ```

2. 削除対象
   - `.work/drafts/`ディレクトリ内の全てのファイル
   - `.work/temp/`ディレクトリ内の全てのファイル
