---
description: Gitの操作に関するルールを定義します
globs: ["**/*"]
---

# Git操作ルール

## 1. 目的

本ルールは以下の目的のために定義されています：

1. 変更履歴の管理
   - コミット履歴の整理
   - 変更内容の追跡
   - バージョン管理

2. ブランチ管理
   - 作業の分離
   - コンフリクトの防止
   - 並行開発の実現

3. コード品質の維持
   - レビュー前の品質確認
   - テスト実行の徹底
   - コーディング規約の遵守

## ブランチ管理

### ブランチ命名規則

* 機能追加: `feat/機能名`
* バグ修正: `fix/修正内容`
* ドキュメント: `docs/内容`
* リファクタリング: `refactor/内容`
* テスト追加・修正: `test/内容`

### ブランチ作成手順

1. mainブランチの更新
   ```bash
   git checkout main
   git fetch origin main
   git pull --rebase origin main
   ```

2. 作業ブランチの作成
   ```bash
   git checkout -b <branch-name>
   ```

### ブランチの同期

1. mainブランチの変更取り込み
   ```bash
   git fetch origin main
   git rebase origin/main
   ```

2. コンフリクト解消
   - コンフリクトファイルの確認
   - 変更内容の確認と解決
   - テストの実行

## コミット管理

### コミットメッセージ規則

```
<type>(<scope>): <description>

[optional body]

[optional footer]
```

* type: 
  - feat: 新機能
  - fix: バグ修正
  - docs: ドキュメント
  - style: フォーマット
  - refactor: リファクタリング
  - test: テスト
  - chore: その他

* scope: 変更範囲（オプション）
* description: 変更内容の要約
* body: 詳細な説明（オプション）
* footer: 関連する課題番号等（オプション）

### コミットの粒度

1. 機能単位でのコミット
   - 1つの機能や修正を1つのコミットに
   - テストは対象コードと同じコミットに含める
   - 関連するドキュメント更新も同じコミットに

2. コミットの分割
   - 大きな変更は複数のコミットに分割
   - 各コミットで動作する状態を維持
   - レビューしやすい単位に分割

### コミット前の確認

1. 変更内容の確認
   ```bash
   git status
   git diff
   ```

2. 不要なファイルの除外
   - ビルド成果物
   - IDE設定ファイル
   - 一時ファイル

3. テストの実行
   - 全てのテストが通過
   - リンターエラーの解消
   - 動作確認の実施

## リモート操作

### プッシュ前の確認

1. ローカルの状態確認
   - 不要なファイルが含まれていないか
   - コミットメッセージの確認
   - テスト実行結果の確認

2. リモートとの同期
   ```bash
   git fetch origin main
   git rebase origin/main
   ```

### プッシュ手順

1. 変更のプッシュ
   ```bash
   git push -u origin <branch-name>
   ```

2. プッシュ後の確認
   - プッシュの成功確認
   - リモートブランチの状態確認
   - CI/CDの実行状態確認

## 作業完了時の手順

1. 変更の確定
   - 全ての変更がコミット済みか確認
   - コミットメッセージの整理
   - 不要なファイルの削除

2. mainブランチの更新
   ```bash
   git checkout main
   git pull origin main
   ``` 