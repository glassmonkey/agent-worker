---
description: 開発サイクルに関するルールを定義します
globs: ["**/*"]
---

# 開発サイクルルール

## 1. 目的

本ルールは以下の目的のために定義されています：

1. 開発プロセスの標準化
   - 作業手順の明確化
   - 品質基準の統一
   - 効率的な開発の実現

2. 品質管理の強化
   - 早期の問題発見
   - テスト駆動開発の促進
   - コードレビューの充実

3. チーム協働の促進
   - 情報共有の円滑化
   - 進捗管理の効率化
   - フィードバックの活性化

## 開発サイクルの流れ

### 1. 課題の起票

1. 課題作成のタイミング
   - 新機能開発の開始時
   - バグ発見時
   - 改善提案時
   - PRレビュー時の派生課題

2. 課題の記載内容
   - 目的と背景
   - 実装方針
   - 受け入れ基準
   - 影響範囲

3. 課題のラベル付け
   - 種別（feature/bug/improvement）
   - 優先度（high/medium/low）
   - ステータス（ready/blocked）

### 2. 開発準備

1. ブランチ作成
   - 課題番号を含むブランチ名
   - mainブランチからの作成
   - 作業範囲の明確化

2. 実装計画
   - テスト計画の立案
   - タスクの分割
   - 依存関係の確認

### 3. 実装フェーズ

1. テスト駆動開発
   - テストの作成
   - 実装
   - リファクタリング

2. コミット管理
   - 適切な粒度でのコミット
   - 明確なコミットメッセージ
   - 定期的なプッシュ

3. 進捗報告
   - 課題への進捗コメント
   - ブロッカーの報告
   - 必要に応じた方針の見直し

4. 実装完了時の振り返り
   - 実装内容の振り返り
     * 良かった点の共有
     * 改善点の特定
     * 次回への反映
   - 技術的な振り返り
     * 採用した技術の評価
     * パフォーマンスの考察
     * セキュリティの確認
   - プロセスの振り返り
     * 開発手順の評価
     * 時間管理の評価
     * コミュニケーションの評価

### 4. レビュー準備

1. 実装の完了確認
   - 全てのテストが通過
   - コードの品質確認
   - ドキュメントの更新
   - 振り返りの完了確認

2. PRの作成
   - 変更内容の説明
   - レビュー観点の明示
   - 関連課題のリンク
   - 振り返りで特定した改善点の共有

### 5. レビューフェーズ

1. レビュー対応
   - 指摘事項への対応
   - 追加テストの作成
   - コードの改善

2. 派生課題の管理
   - 新たな課題の起票
   - 優先順位の設定
   - 対応方針の決定

### 6. マージと完了

1. マージ前の確認
   - レビュー承認の確認
   - CIの成功確認
   - コンフリクトの解消

2. マージ状態の確認
   - 作業完了前に必ずマージ状態を確認
   ```bash
   gh pr view <PR番号>  # PRの状態を確認
   ```
   - マージされていない場合は作業完了手順を中止
   - マージ済みの場合のみ作業完了手順を実行

3. 作業完了手順
   - マージ済みの場合のみ実行
   ```bash
   # 一時ファイルの掃除
   make pr-clean

   # 一時ファイルが削除されたことを確認
   ls -la .work/  # ディレクトリが空であることを確認

   # 関連issueのステータス確認
   gh issue list --state all | grep <issue番号>
   ```
   - 以下を確認
     * 一時ファイルが正常に削除されたか（.workディレクトリが空であるか）
     * 関連issueが全てクローズされているか

4. 最終確認
   - 実装の振り返りで特定した改善点の反映状況
   - 次回の開発に向けた教訓の文書化
   - チーム内での知見の共有

## 品質管理

### 1. テスト基準

1. ユニットテスト
   - 機能単位のテスト
   - エッジケースの考慮
   - 適切なモック化

2. 統合テスト
   - コンポーネント間の連携
   - エラーハンドリング
   - パフォーマンス確認

### 2. コード品質

1. 静的解析
   - リンターの適用
   - 型チェック
   - 複雑度の確認

2. レビュー観点
   - 可読性
   - 保守性
   - セキュリティ

## 継続的改善

### 1. 振り返りの実施

1. タイミング
   - 機能実装完了時
   - スプリント終了時
   - 重要な課題対応後

2. 観点
   - プロセスの改善
   - 技術的な改善
   - チーム協働の改善

### 2. ドキュメント管理

1. 更新タイミング
   - 機能追加時
   - 仕様変更時
   - 問題解決時

2. 管理対象
   - 設計ドキュメント
   - APIドキュメント
   - 運用手順書

## 3. 関連ルール

* [品質確認ルール](mdc:quality-check.mdc): 品質確認の基準と手順
  - 開発中の確認事項
  - 作業完了前の確認事項
  - プッシュ後の確認事項
  - コードレビューの基準

* [振り返りと改善ルール](mdc:retrospective.mdc): 振り返りと改善活動の進め方
  - 振り返りの実施タイミング
  - 振り返りの実践方法
  - 振り返りの観点
  - 改善活動の進め方

* [Git操作ルール](mdc:git.mdc): Git操作の手順
  - ブランチ管理の方法
  - コミット管理の方法
  - PR作成前の手順
  - 作業完了時の手順

* [PR作成ルール](mdc:pr-creation.mdc): PRの作成手順
  - 作業完了前の確認事項
  - PR作成の手順
  - PR本文の作成方法
  - 作業完了時の手順

* [テストコード管理ルール](mdc:test.mdc): テストコードの管理方法
  - テストコードの基準
  - テストの構造化
  - テストファイルの配置
  - バージョン管理の方法