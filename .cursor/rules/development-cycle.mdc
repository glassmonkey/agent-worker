---
description: 開発サイクルに関するルールを定義します
globs: ["**/*"]
---

# 開発サイクルルール

## 1. 開発の基本方針

* テスト駆動開発（TDD）を採用し、品質を重視する
* 変更は小さな単位で行い、独立して検証可能にする
* チーム全体で知識を共有し、継続的な改善を行う

## 2. 開発ライフサイクル

### 2.1 作業開始前の準備

1. 仕様の確認
   * 変更内容を明確に理解する
   * 不明点がある場合は質問して解消する
   * 変更範囲を特定する

2. 作業計画の立案
   * 作業手順の計画
   * 必要なテストケースの洗い出し
   * 影響範囲の確認

3. 全ファイルの確認
   * 変更対象となる全てのファイルの内容を確認
   * 類似コードや重複の有無を確認
   * 設定や依存関係を確認
   * 問題点を洗い出し、リスト化

4. 修正計画の立案
   * 問題点ごとの対応方針を決定
   * 修正の優先順位を設定
   * 変更の影響範囲を評価
   * コミット計画を立案
     - 変更の種類ごとにコミットを分ける
     - コミットメッセージの内容を事前に検討
     - 関連する変更はまとめてコミット

5. 作業環境の準備
   * [Git操作ルール](mdc:git.mdc)に従って作業ブランチを作成
   * 変更前のコードの状態を保存

### 2.2 開発プロセス

開発は[TDDサイクルルール](mdc:tdd.mdc)に従って進める。
各ステップでの品質確認は[品質確認ルール](mdc:quality-check.mdc)に従って実施する。

### 2.3 作業完了時の手順

1. 品質確認
   * [品質確認ルール](mdc:quality-check.mdc)に従って最終確認を実施
   * 全てのチェック項目をクリアしていることを確認

2. 振り返りと改善
   * [振り返りと改善ルール](mdc:retrospective.mdc)に従って振り返りを実施
   * 改善点を特定し、必要に応じてルールを更新

3. PR作成
   * [PR作成ルール](mdc:pr-creation.mdc)に従ってPRを作成
   * レビュー依頼を実施

## 3. 関連ルール

* [TDDサイクルルール](mdc:tdd.mdc): 開発プロセスの詳細
* [品質確認ルール](mdc:quality-check.mdc): 品質確認の基準と手順
* [振り返りと改善ルール](mdc:retrospective.mdc): 振り返りと改善活動の進め方
* [Git操作ルール](mdc:git.mdc): Git操作の手順
* [PR作成ルール](mdc:pr-creation.mdc): PRの作成手順
* [テストコード管理ルール](mdc:test.mdc): テストコードの管理方法

## 3. 継続的改善

### 3.1 振り返りの実施タイミング

* 作業完了時（必須）
  - 作業内容のプッシュ後
  - PR作成前
  - 振り返り自体は現在の作業ブランチで実施
  - 作業完了時チェックリスト
    ```
    □ 変更内容のプッシュ完了
    □ 振り返りの実施
      - 作業概要の記録
      - プロセス評価の実施
      - 問題点の特定と対策の検討
      - 良かった点の確認
      - 改善点の洗い出し
      - 次回への反映事項の整理
      - ルール変更の必要性の確認
    □ 振り返りに基づく改善提案の作成
    □ PR作成
    ```

* その他の振り返り機会（状況に応じて）
  - 大きな機能追加や変更の完了時
  - 問題発生時
  - 定期的な振り返り（週次/月次）

### 3.2 振り返りの実践

1. 記録
   * `docs/retrospectives/`ディレクトリに`YYYYMMDD_作業内容.md`の形式で保存
   * 具体的な事実に基づく記録
   * 良い点と改善点のバランス
   * [振り返りテンプレート](mdc:#33-振り返りテンプレート)に従って記録
   * 振り返りファイルもPRに含めてコミット
   * 振り返りで得られた改善点は必ずルールに反映する

2. 改善活動
   * 振り返りで得られた改善点を整理
   * ルール変更が必要な場合：
     1. 新しいブランチを作成（`docs/improve-作業内容`）
     2. 該当するルールファイルを更新
     3. 変更内容を説明するPRを作成
   * チーム全体での改善推進
     - 振り返りの内容を共有
     - 改善提案の議論
     - 合意された改善案の実施

3. フォローアップ
   * 改善提案のPRがマージされたことを確認
   * 次回の作業で改善が反映されているか確認
   * 必要に応じて追加の改善を提案

### 3.3 振り返りテンプレート

```markdown
# 振り返り: [機能名/変更内容]

## 作業概要
- 目的:
- 変更範囲:
- 作業期間:

## プロセス評価
- TDDサイクルの遵守状況:
- 作業順序の適切さ:
- 効率性:

## 発生した問題
- 問題1:
  - 原因:
  - 対応:
  - 今後の防止策:

## 良かった点
- 

## 改善点
- 

## 次回への反映事項
- 

## ルール変更の提案
- 
``` 