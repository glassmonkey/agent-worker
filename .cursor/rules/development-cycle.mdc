---
description: 開発サイクルに関するルールを定義します
globs: ["**/*"]
---

# 開発サイクルルール

## 1. 開発の基本方針

* テスト駆動開発（TDD）を採用し、品質を重視する
* 変更は小さな単位で行い、独立して検証可能にする
* チーム全体で知識を共有し、継続的な改善を行う

## 2. 開発ライフサイクル

### 2.1 作業開始前の準備

1. 仕様の確認
   * 変更内容を明確に理解する
   * 不明点がある場合は質問して解消する
   * 変更範囲を特定する

2. 作業計画の立案
   * 作業手順の計画
   * 必要なテストケースの洗い出し
   * 影響範囲の確認

3. 作業環境の準備
   * [Git操作ルール](mdc:git.mdc)に従って作業ブランチを作成
   * 変更前のコードの状態を保存

### 2.2 開発プロセス（TDDサイクル）

各機能の開発は以下のサイクルで行う。各ステップの完了時にコミットを作成し、変更を記録する。
コミットメッセージの形式は[Git操作ルール](mdc:git.mdc)に従うこと。

#### 新規機能開発時

1. Red: 失敗するテストを書く
   * 新機能の仕様を反映したテストを作成（[テストコード管理ルール](mdc:test.mdc)に従う）
   * テストが意図通り失敗することを確認
   * コミットメッセージ例: `test: add test for new feature`

2. Green: 最小限の実装
   * テストをパスさせる最小限のコードを実装
   * この段階では実装の美しさは二の次
   * コミットメッセージ例: `feat: implement new feature`

3. Refactor: コードの改善
   * 可読性と保守性の向上
   * 重複の排除と抽象化
   * テストが通る状態を保つ
   * コミットメッセージ例: `refactor: improve code structure`

#### 既存コードの変更時

1. Red: テストの更新
   * 新仕様に基づくテストの変更
   * 不要なテストの削除
   * コミットメッセージ例: `test: update test for new spec`

2. Green: 実装の更新
   * 必要最小限の変更
   * コミットメッセージ例: `feat: update implementation`

3. Refactor: コードの整理
   * 不要コードの削除とスタイルの統一
   * コミットメッセージ例: `refactor: cleanup and optimize`

### 2.3 品質確認

1. 開発中の確認（各TDDサイクル）
   * テストの意図と網羅性
   * 実装の最小性
   * リファクタリングの適切さ

2. 作業完了前の確認
   * コードの品質（命名、スタイル、構造）
   * 変更履歴の適切さ
   * ドキュメントの更新

## 3. 継続的改善

### 3.1 振り返りの実施タイミング

* PRの作成前
* 大きな機能追加や変更の完了時
* 問題発生時
* 定期的な振り返り（週次/月次）

### 3.2 振り返りの実践

1. 記録
   * `.work/retrospective/`ディレクトリに保存
   * 具体的な事実に基づく記録
   * 良い点と改善点のバランス

2. 改善活動
   * 具体的なアクションの設定
   * ルール変更の提案と反映
   * チーム全体での改善推進

### 3.3 振り返りテンプレート

```markdown
# 振り返り: [機能名/変更内容]

## 作業概要
- 目的:
- 変更範囲:
- 作業期間:

## プロセス評価
- TDDサイクルの遵守状況:
- 作業順序の適切さ:
- 効率性:

## 発生した問題
- 問題1:
  - 原因:
  - 対応:
  - 今後の防止策:

## 良かった点
- 

## 改善点
- 

## 次回への反映事項
- 

## ルール変更の提案
- 
``` 