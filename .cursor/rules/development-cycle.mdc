---
description: 開発サイクルに関するルールを定義します
globs: *
---

# 開発サイクルルール

## 1. 開発の基本方針

* テストコードによる品質担保を重視する
* 変更は小さな単位で行い、独立して検証可能にする
* チーム全体で知識を共有し、継続的な改善を行う

## 2. 開発ライフサイクル

### 2.1 作業開始前の準備

1. 仕様の確認
   * 変更内容を明確に理解する
   * 不明点がある場合は質問して解消する
   * 変更範囲を特定する

2. 作業計画の立案
   * 作業手順の計画
   * 必要なテストケースの洗い出し
   * 影響範囲の確認

3. 全ファイルの確認
   * 変更対象となる全てのファイルの内容を確認
   * 類似コードや重複の有無を確認
   * 設定や依存関係を確認
   * 問題点を洗い出し、リスト化

4. 修正計画の立案
   * 問題点ごとの対応方針を決定
   * 修正の優先順位を設定
   * 変更の影響範囲を評価
   * コミット計画を立案
     - 変更の種類ごとにコミットを分ける
     - コミットメッセージの内容を事前に検討
     - 関連する変更はまとめてコミット

5. 作業環境の準備
   * [Git操作ルール](mdc:git.mdc)に従って作業ブランチを作成
   * 変更前のコードの状態を保存

### 2.2 開発プロセス

1. 実装
   * 仕様に基づいて実装を行う
   * コードの可読性と保守性を意識する
   * 既存機能への影響を最小限に抑える

2. テスト作成
   * [テストコード管理ルール](mdc:test.mdc)に従ってテストを作成
   * 機能の仕様を正確に反映したテストケースを作成
   * 正常系・異常系の両方をカバー
   * エッジケースを考慮

3. 品質確認
   * テストの実行と結果の確認
   * コードレビューの実施
   * 必要に応じてリファクタリング

各ステップでの品質確認は[品質確認ルール](mdc:quality-check.mdc)に従って実施する。

### 2.3 作業完了時の手順

1. 品質確認
   * [品質確認ルール](mdc:quality-check.mdc)に従って最終確認を実施
   * 全てのチェック項目をクリアしていることを確認

2. 振り返りと改善
   * [振り返りと改善ルール](mdc:retrospective.mdc)に従って振り返りを実施
   * 改善点を特定し、必要に応じてルールを更新

3. PR作成
   * [PR作成ルール](mdc:pr-creation.mdc)に従ってPRを作成
   * レビュー依頼を実施

## 3. 関連ルール

* [品質確認ルール](mdc:quality-check.mdc): 品質確認の基準と手順
  - 開発中の確認事項
  - 作業完了前の確認事項
  - プッシュ後の確認事項
  - コードレビューの基準

* [振り返りと改善ルール](mdc:retrospective.mdc): 振り返りと改善活動の進め方
  - 振り返りの実施タイミング
  - 振り返りの実践方法
  - 振り返りの観点
  - 改善活動の進め方

* [Git操作ルール](mdc:git.mdc): Git操作の手順
  - ブランチ管理の方法
  - コミット管理の方法
  - PR作成前の手順
  - 作業完了時の手順

* [PR作成ルール](mdc:pr-creation.mdc): PRの作成手順
  - 作業完了前の確認事項
  - PR作成の手順
  - PR本文の作成方法
  - 作業完了時の手順

* [テストコード管理ルール](mdc:test.mdc): テストコードの管理方法
  - テストコードの基準
  - テストの構造化
  - テストファイルの配置
  - バージョン管理の方法