---
description: "TypeScript/Next.jsのコーディング規約とベストプラクティス"
globs: ["**/*.ts", "**/*.tsx"]
---

# TypeScript ルール

## ファイル命名規則
- コンポーネント: パスカルケース（例: `Button.tsx`, `UserProfile.tsx`）
- ユーティリティ: キャメルケース（例: `utils.ts`, `formatDate.ts`）
- 型定義: パスカルケース + `.d.ts`（例: `User.d.ts`）
- テスト: 対象ファイル名 + `.test.ts(x)`（例: `Button.test.tsx`）

## コーディング規約
- 型定義
  - インターフェースを優先的に使用
  - 型エイリアスは複雑な型定義に使用
  - ジェネリック型は適切に制約を設定
- コンポーネント
  - Props型を明示的に定義
  - 必要に応じてJSDocコメントを追加
  - `use client`ディレクティブを適切に使用
- エラー処理
  - 適切な型のエラーをスロー
  - try-catchブロックを使用
  - エラーメッセージは具体的に記述

## ベストプラクティス
- 厳格な型チェック
  - `strict: true`を設定
  - `noImplicitAny: true`を設定
  - `strictNullChecks: true`を設定
- 非同期処理
  - async/awaitを使用
  - Promise型を適切に指定
  - エラーハンドリングを忘れない
- インポート/エクスポート
  - 名前付きエクスポートを優先
  - デフォルトエクスポートは慎重に使用
  - 循環参照を避ける

## パフォーマンス
- 型の最適化
  - 不要な型キャストを避ける
  - 型の再利用を推進
  - 複雑な型計算を最小限に
- メモ化
  - `useMemo`と`useCallback`を適切に使用
  - 依存配列を正しく設定
  - 過度な最適化を避ける 
