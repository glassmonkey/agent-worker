---
description: GitHubワークフローに関するルールを定義します
globs: ["**/*", ".work/*", ".gitignore"]
---

# GitHubワークフロールール

## 1. 目的

本ルールは以下の目的のために定義されています：

1. 開発ワークフローの標準化
   - Git操作の統一
   - PR作成プロセスの標準化
   - 一時ファイル管理の効率化

2. 品質管理の強化
   - コードレビューの効率化
   - 変更履歴の適切な管理
   - ドキュメントの整備

3. チーム協働の促進
   - 情報共有の円滑化
   - レビュープロセスの効率化
   - フィードバックの質の向上

## 2. 作業の開始

### ブランチ作成

1. ブランチ命名規則
   - 機能追加: `feat/機能名`
   - バグ修正: `fix/修正内容`
   - ドキュメント: `docs/内容`
   - リファクタリング: `refactor/内容`
   - テスト追加・修正: `test/内容`

2. ブランチ作成手順
   ```bash
   make start-work branch=<branch-name>
   ```
   このコマンドは以下を実行します：
   - mainブランチの最新化
   - 新規ブランチの作成
   - 一時ファイルの初期化

## 3. 開発プロセス

### コミット管理

1. コミットの粒度
   - 機能単位での分割
   - テストと実装の対応
   - 1コミットの適切なサイズ

2. コミットメッセージ
   ```
   <type>(<scope>): <description>

   [optional body]

   [optional footer]
   ```
   - type: feat, fix, docs, style, refactor, test, chore
   - scope: 変更の範囲（オプション）
   - description: 変更内容の要約
   - body: 変更の詳細な説明
   - footer: Breaking changes や Issue への参照

### 一時ファイルの管理

1. 配置場所
   - 全ての一時ファイルは`.work`ディレクトリに配置
   - PR関連: `pr_body.md`, `pr_draft.md`
   - その他の一時ファイル

2. クリーンアップ
   ```bash
   make pr-clean  # 一時ファイルを削除
   ```

## 4. PR作成プロセス

### PR作成前の準備

1. コードの品質確認
   ```bash
   make test
   make lint
   make type-check
   ```

2. 振り返りの実施
   ```bash
   make prepare-retrospective
   make check-retrospective
   ```

3. mainブランチとの同期
   ```bash
   git fetch origin main
   git rebase origin/main
   ```

### PR作成

1. PR本文の作成
   - `.work/pr_body.md`にPR内容を記載
   - テンプレートに従って必要事項を記入

2. PRの作成
   ```bash
   make submit-work title="<PRタイトル>"
   ```

### レビュー対応

1. レビューコメントへの対応
   - 各コメントに対する対応方針を明確に説明
   - 修正が完了したらResolveする
   - 議論が必要な場合は関係者をメンションする

2. 修正の反映
   - レビュー指摘に基づく修正は同一ブランチで実施
   - 修正後は再度テストを実行
   - 修正内容を分かりやすくコミットメッセージに記載

## 5. マージと完了

### マージ条件

1. レビュー承認
   - 必要数のレビュー承認を得ている
   - 全ての指摘事項が解決済み

2. CI/テスト
   - 全てのテストが通過
   - リンター警告が解消済み

3. ブランチの状態
   - mainブランチと同期済み
   - コンフリクトが解消済み

### 作業完了

1. マージ後の確認
   - PRが正常にマージされたことを確認
   - デプロイが正常に完了（必要な場合）

2. クリーンアップ
   ```bash
   make finish-work PR="<PRタイトル>"
   ```

## 6. GitHub機能の活用

### プロジェクト管理

1. プロジェクトボードの構成
   - To do
   - In Progress
   - Review in Progress
   - Done

2. マイルストーン管理
   - 期間の設定
   - 目標の設定
   - 優先順位の設定

### セキュリティ管理

1. シークレット管理
   - 環境変数の適切な管理
   - アクセストークンの保護
   - 認証情報の安全な取り扱い

2. ブランチ保護
   - mainブランチの保護
   - レビュー必須化
   - CI通過の必須化

## 7. 関連ルール

* [開発サイクルルール](mdc:development-cycle.mdc): 開発サイクルの全体像
* [実装プロセスルール](mdc:implementation-process.mdc): 実装の進め方
* [品質確認ルール](mdc:quality-check.mdc): 品質確認の基準と手順 