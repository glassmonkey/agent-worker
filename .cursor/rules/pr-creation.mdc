---
description: プルリクエスト作成時の手順を定義します
globs: 
---

# PR作成時の手順

## 作業完了前の確認

1. テストとリントの確認
   * 全てのテストが通過することを確認
   * リントエラーがないことを確認
   * 指示内容に応じて必要な動作確認を実施

2. コミットの整理
   * 類似した変更や手戻りのあったコミットを整理
   * コミットメッセージがconventional commitsに従っていることを確認

## PR作成手順

1. ブランチ名の確認
   * 機能追加: `feat/機能名`
   * バグ修正: `fix/修正内容`
   * ドキュメント: `docs/内容`
   * リファクタリング: `refactor/内容`
   * テスト追加・修正: `test/内容`

2. リモートへのプッシュ
   * `git push -u origin <branch-name>`を実行

3. PR本文の作成
   * `.work/pr_body.txt`に以下のフォーマットで作成：
     ```markdown
     # 概要

     変更内容の概要を記載

     # 確認したこと

     - 動作確認や品質確認の内容を記載（箇条書き）

     # その他共有すべき特記事項

     レビュアーに共有すべき事項や注意点を記載
     ```
   * 作成方法：
     ```bash
     # printfコマンドを使用する場合
     printf "# 概要\n\n変更内容の概要を記載\n\n# 確認したこと\n\n- 確認項目1\n- 確認項目2\n\n# その他共有すべき特記事項\n\n特になし" > .work/pr_body.txt

     # catコマンドを使用する場合
     cat << 'EOF' > .work/pr_body.txt
     # 概要

     変更内容の概要を記載

     # 確認したこと

     - 確認項目1
     - 確認項目2

     # その他共有すべき特記事項

     特になし
     EOF
     ```

4. PRの作成
   * 新規PR作成：
     ```bash
     gh pr create --title "<description>" --body-file .work/pr_body.txt
     ```
     - タイトルは変更内容が一言でわかる表現を使用
       - 良い例：`ユーザー登録機能を追加`
       - 良い例：`ログイン時のバリデーションエラーを修正`
       - 悪い例：`機能追加`（具体的な内容が不明確）
       - 悪い例：`バグ修正`（何のバグかが不明確）

   * 既存PRの編集：
     ```bash
     gh pr edit <PR番号> --title "<description>" --body-file .work/pr_body.txt
     ```

## PR本文作成時の注意事項

* 各セクション間は空行を入れること
* 確認事項は箇条書きで記載すること
* 特記事項がない場合は「特になし」と記載すること
* gh prコマンドで作成する場合は、シングルクォート（`'`）で囲み、改行は`\n`で表現すること

## 作業完了時の手順

作業完了の指示があった場合のみ、以下の手順を実施してください：

1. 一時ファイルの削除
   * `make pr-clean`を実行

2. ブランチの切り替えと更新
   * mainブランチに移動（`git checkout main`）
   * 最新の変更を取得（`git pull origin main`） 