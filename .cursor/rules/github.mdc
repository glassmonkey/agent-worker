---
description: GitHubの操作に関するルールを定義します
globs: ["**/*"]
---

# GitHub操作ルール

## 1. 目的

本ルールは以下の目的のために定義されています：

1. GitHub機能の効率的な活用
   - プルリクエストの管理
   - コードレビューの実施
   - ドキュメントの整備

2. コラボレーションの促進
   - チーム間のコミュニケーション
   - コードの品質向上
   - ナレッジの共有

## プルリクエスト管理

### PRの作成基準

1. 機能追加・修正の完了時
   - 実装が完了し、動作確認済みの場合
   - テストが追加・更新済みの場合
   - ドキュメントが更新済みの場合

2. レビュー依頼時
   - コードの品質が確認済みの場合
   - 変更内容が明確に説明されている場合

### PRの作成手順

1. PR作成前の確認
   - ブランチが最新の状態か確認
   - コンフリクトがないか確認
   - テストが全て通過しているか確認

2. PR本文の作成
   ```markdown
   ## 変更内容
   
   実装した機能や修正の概要を簡潔に記載
   
   ## 変更理由
   
   なぜこの変更が必要なのかを説明
   
   ## 確認項目
   - [ ] テストの追加・更新
   - [ ] ドキュメントの更新
   - [ ] 動作確認
   - [ ] レビュー依頼
   
   ## その他
   - 関連するPR
   - 参考情報
   - 注意事項
   ```

3. レビュアーの設定
   - 適切なレビュアーを選定
   - 必要に応じて複数のレビュアーを設定

### レビュープロセス

1. レビュー実施
   - コードの品質確認
   - 実装の妥当性確認
   - セキュリティ上の問題がないか確認

2. フィードバック提供
   - 具体的な改善点の指摘
   - 代替案の提案
   - 質問・確認事項の明確化

3. レビュー完了
   - 全ての指摘事項が解決されているか確認
   - 必要な修正が反映されているか確認
   - マージの承認

### マージ基準

1. 必須条件
   - 全てのレビューが承認済み
   - 全てのテストが通過
   - コンフリクトが解消済み

2. 追加確認事項
   - ドキュメントが更新済み
   - 変更履歴が整理済み
   - デプロイ手順が明確

### ドキュメント管理

1. READMEの更新
   - プロジェクトの概要
   - セットアップ手順
   - 利用方法の説明

2. APIドキュメントの更新
   - エンドポイントの説明
   - リクエスト・レスポンスの形式
   - エラーハンドリング

3. 開発ガイドの更新
   - コーディング規約
   - テスト方針
   - デプロイフロー 