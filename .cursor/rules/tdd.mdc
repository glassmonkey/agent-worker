---
description: TDDサイクルに関するルールを定義します
globs: ["**/*.{ts,tsx,js,jsx}"]
---

# TDDサイクルルール

## 1. 基本方針

* テスト駆動開発（TDD）を採用し、品質を重視する
* 変更は小さな単位で行い、独立して検証可能にする
* 各ステップでの変更は最小限に保つ

## 2. 開発プロセス

### 2.1 新規機能開発時

1. Red: 失敗するテストを書く
   * 新機能の仕様を反映したテストを作成（[テストコード管理ルール](mdc:test.mdc)に従う）
   * テストが意図通り失敗することを確認
   * コミットメッセージ例: `test: add test for new feature`

2. Green: 最小限の実装
   * テストをパスさせる最小限のコードを実装
   * この段階では実装の美しさは二の次
   * コミットメッセージ例: `feat: implement new feature`

3. Refactor: コードの改善
   * 可読性と保守性の向上
   * 重複の排除と抽象化
   * テストが通る状態を保つ
   * コミットメッセージ例: `refactor: improve code structure`

### 2.2 既存コードの変更時

1. Red: テストの更新
   * 新仕様に基づくテストの変更
   * 不要なテストの削除
   * コミットメッセージ例: `test: update test for new spec`

2. Green: 実装の更新
   * 必要最小限の変更
   * コミットメッセージ例: `feat: update implementation`

3. Refactor: コードの整理
   * 不要コードの削除とスタイルの統一
   * コミットメッセージ例: `refactor: cleanup and optimize`

## 3. 各ステップでの確認事項

1. Red段階
   * テストの意図が明確か
   * テストケースは十分か
   * エッジケースは考慮されているか

2. Green段階
   * 実装は最小限か
   * テストをパスする以外の機能を含んでいないか
   * 実装は仕様を満たしているか

3. Refactor段階
   * コードは理解しやすいか
   * 重複は排除されているか
   * パフォーマンスは考慮されているか
   * テストは壊れていないか 