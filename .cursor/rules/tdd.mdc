---
description: TDDサイクルに関するルールを定義します
globs: ["**/*.test.*", "**/*_test.*", "**/test_*.*"]
---

# TDDサイクルルール

## 1. 基本方針

* テストファーストで開発を進める
* 小さな単位で変更を加える
* リファクタリングを積極的に行う
* テストの品質を重視する

## 2. TDDサイクル

### 2.1 Red: テストの作成

1. 要件の理解
   * 実装する機能の仕様を明確にする
   * テストケースを洗い出す
   * エッジケースを考慮する

2. テストの作成
   * 最小限のテストから開始
   * テストの意図が明確になるように命名
   * テストの構造化（Given-When-Then）
   * 期待する結果を明確に記述

3. テストの実行
   * テストが失敗することを確認
   * コンパイルエラーも失敗として扱う
   * 失敗の理由が要件に合致していることを確認

### 2.2 Green: 実装

1. 最小限の実装
   * テストを通過する最小限のコードを書く
   * この段階では実装の美しさは二の次
   * 既存のテストが壊れていないことを確認

2. テストの再実行
   * 全てのテストが通過することを確認
   * 新しいテストが通過することを確認
   * テストの実行時間を確認

### 2.3 Refactor: リファクタリング

1. コードの改善
   * 重複の除去
   * 命名の改善
   * メソッドの抽出
   * クラスの分割
   * デザインパターンの適用

2. テストコードの改善
   * テストの重複を除去
   * テストヘルパーの作成
   * テストの構造化
   * テストの可読性向上

3. 品質確認
   * 全てのテストが通過することを確認
   * コードの可読性を確認
   * パフォーマンスへの影響を確認

## 3. 新規機能開発時のプロセス

1. 準備
   * 機能の要件を理解
   * テストケースの洗い出し
   * 開発環境の準備

2. 開発サイクル
   * 最小のテストケースから開始
   * TDDサイクルを繰り返す
   * 段階的に機能を追加

3. 完了条件
   * 全ての要件がテストでカバー
   * 全てのテストが通過
   * コードがリファクタリング済み

## 4. 既存コード変更時のプロセス

1. 準備
   * 既存コードの理解
   * 既存テストの確認
   * 変更範囲の特定

2. 開発サイクル
   * 既存テストの修正/追加
   * TDDサイクルを繰り返す
   * 既存機能の維持を確認

3. 完了条件
   * 変更箇所のテストカバレッジ確認
   * 既存機能への影響がないことを確認
   * パフォーマンスへの影響確認

## 5. 各ステップでの確認事項

### 5.1 テスト作成時

* テストの意図が明確か
* テストケースは十分か
* エッジケースは考慮されているか
* テストの構造は適切か

### 5.2 実装時

* テストを通過する最小限の実装か
* 既存のテストは壊れていないか
* 実装は要件を満たしているか
* パフォーマンスへの影響は許容範囲か

### 5.3 リファクタリング時

* コードの品質は向上したか
* テストは全て通過しているか
* 変更は必要最小限か
* 設計の一貫性は保たれているか 