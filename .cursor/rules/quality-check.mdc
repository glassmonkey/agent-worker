---
description: 品質確認の基準と手順を定義します
globs: ["**/*"]
---

# 品質確認ルール

## 1. 開発中の確認事項

### 1.1 コードの品質

* 命名規則の遵守
  - 意図が明確な変数名・関数名
  - プロジェクトの命名規則に準拠
  - 一貫性のある命名

* コードの構造
  - 適切な関数/メソッドの分割
  - 単一責任の原則の遵守
  - 適切な抽象化レベル
  - 循環的複雑度の管理

* エラー処理
  - 適切な例外処理
  - エラーメッセージの明確さ
  - エラーの適切なログ記録
  - リソースの適切な解放

### 1.2 テストの品質

* テストの網羅性
  - 機能要件のカバレッジ
  - エッジケースの考慮
  - 異常系のテスト

* テストの構造
  - テストの独立性
  - テストの可読性
  - テストデータの適切な管理
  - テストの実行速度

### 1.3 ドキュメント

* コメント
  - 必要な箇所への適切なコメント
  - コメントの最新性
  - 自明でない処理の説明

* API/インターフェース
  - インターフェースの明確な定義
  - パラメータの説明
  - 戻り値の説明
  - 使用例の提供

## 2. 作業完了前の確認事項

### 2.1 機能確認

* 要件の充足
  - 全ての機能要件の実装
  - 非機能要件の充足
  - エッジケースの処理

* 動作確認
  - 正常系の動作確認
  - 異常系の動作確認
  - パフォーマンスの確認

### 2.2 コード品質

* 静的解析
  - リンター警告の解消
  - 型チェックの通過
  - 複雑度の確認

* テスト
  - 全テストの通過
  - カバレッジの確認
  - テスト品質の確認

### 2.3 変更の影響

* 既存機能
  - 既存機能への影響確認
  - 互換性の確認
  - 性能への影響確認

* 依存関係
  - 依存ライブラリの更新確認
  - 依存関係の整合性確認
  - 循環依存の確認

## 3. プッシュ後の確認事項

### 3.1 CI/CD

* ビルド
  - ビルドの成功
  - 警告の確認
  - ビルド時間の確認

* テスト
  - 全環境でのテスト通過
  - テスト実行時間の確認
  - フレーキーテストの確認

* デプロイ
  - デプロイの成功
  - 環境固有の問題の確認
  - ロールバック手順の確認

### 3.2 コードレビュー準備

* レビュー資料
  - 変更内容の説明
  - テスト結果の説明
  - 影響範囲の説明

* PR内容
  - コミット履歴の整理
  - 変更サイズの適切さ
  - レビュー指摘事項の反映

## 4. コードレビューの基準

### 4.1 機能面

* 仕様との整合性
  - 要件の充足
  - 動作の正確性
  - エラー処理の適切さ

* テストの妥当性
  - テストケースの網羅性
  - テストの信頼性
  - テストの保守性

### 4.2 実装面

* コードの品質
  - 可読性
  - 保守性
  - パフォーマンス
  - セキュリティ

* アーキテクチャ
  - 設計の一貫性
  - 拡張性
  - 再利用性
  - 依存関係の適切さ

### 4.3 ドキュメント

* コメント・説明
  - 必要十分な説明
  - 技術的な正確さ
  - 更新の網羅性

* 変更履歴
  - コミットメッセージの適切さ
  - 変更理由の明確さ
  - 影響範囲の説明 