---
description: 品質確認に関するルールを定義します
globs: ["**/*"]
---

# 品質確認ルール

## 1. 開発中の確認

### 1.1 各TDDサイクルでの確認
* テストの意図と網羅性
  - テストの目的が明確か
  - 必要なケースを網羅しているか
  - エッジケースは考慮されているか

* 実装の最小性
  - 必要最小限の実装になっているか
  - 余分な機能を含んでいないか
  - コードは理解しやすいか

* リファクタリングの適切さ
  - コードの可読性は向上したか
  - 重複は適切に排除されているか
  - パフォーマンスは考慮されているか

### 1.2 コードレビューの基準
* コードの品質
  - 命名は適切か
  - コーディングスタイルは統一されているか
  - コードの構造は理解しやすいか

* テストの品質
  - テストは意図を明確に表現しているか
  - テストケースは十分か
  - テストは保守しやすいか

## 2. 作業完了前の確認

### 2.1 コードの品質確認
* 命名の適切さ
  - 変数名は意図を表しているか
  - 関数名は動作を表しているか
  - クラス名は責務を表しているか

* コーディングスタイル
  - プロジェクトの規約に従っているか
  - 一貫性は保たれているか
  - リンターエラーはないか

* コード構造
  - 責務は適切に分離されているか
  - 依存関係は適切か
  - 拡張性は考慮されているか

### 2.2 変更履歴の確認
* コミットの適切さ
  - コミットは計画通りに行われているか
  - コミットメッセージは適切か
  - 関連する変更は適切にまとめられているか

* Git操作の注意事項
  - 全てのGitコマンドに`| cat`を付けてpager機能を無効化
  - プッシュ前に必ずgit statusで変更状態を確認
  - git diffで変更内容が意図したものか確認
  - 全ての変更が適切にステージングされているか確認

### 2.3 ドキュメントの確認
* READMEの更新
  - 変更内容は反映されているか
  - 手順は最新か
  - 説明は分かりやすいか

* APIドキュメント
  - 新機能は文書化されているか
  - パラメータの説明は正確か
  - 例は適切か

## 3. プッシュ後の確認

### 3.1 リモートリポジトリの確認
* 変更の反映
  - プッシュした変更が正しく反映されているか
  - ファイルの追加・削除が意図通りか
  - ファイルの内容が正しく更新されているか

* コミットログ
  - コミットメッセージが適切か
  - コミットの順序が適切か
  - 変更の意図が明確に伝わるか

### 3.2 関連ファイルの整合性確認
* 参照関係
  - ファイル間の参照は正しく維持されているか
  - 破壊的変更による影響はないか
  - 循環参照は発生していないか

* 依存関係
  - パッケージの依存関係に問題はないか
  - バージョンの整合性は保たれているか
  - 不要な依存は含まれていないか 