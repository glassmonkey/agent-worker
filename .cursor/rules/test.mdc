---
description: テストコードの管理に関するルールを定義します
globs: ["**/*.{test,spec}.*"]
---

# テストコード管理ルール

## テストコードの基準

* 機能の仕様を正確に反映したテストケースを作成
* 正常系と異常系の両方のケースを考慮
* エッジケースを適切にカバー
* テストコードの可読性と保守性を確保
* テストの意図が明確になるよう、テスト名と構造を工夫する

## テストの構造化

### テスト名の命名規則

* テストケース名は「何をテストするか」が明確になるように記述
* 期待される結果を含める
* 例：
  * `renders_error_message_when_validation_fails`
  * `returns_empty_array_when_no_data_exists`
  * `throws_exception_when_invalid_input`

### テストの構成

* Arrange-Act-Assert（AAA）パターンに従う
  * Arrange: テストの前提条件を設定
  * Act: テスト対象の処理を実行
  * Assert: 結果を検証
* 各セクションは空行で区切る
* 複雑なセットアップが必要な場合は、ヘルパー関数を作成

### テストデータ

* テストデータは目的に応じて最小限に保つ
* テストデータは可能な限りテストコード内で完結させる
* 共通のテストデータは専用のファクトリやフィクスチャとして管理

## テストファイルの配置

テストの種類に応じて適切な配置場所を選択すること：

* ユニットテスト: 対象ファイルと同じディレクトリに `*.test.*` または `*.spec.*` として配置
* 統合テスト: `tests/integration/` または適切なディレクトリに配置
* E2Eテスト: `tests/e2e/` または適切なディレクトリに配置

## バージョン管理

* テストコードの変更も通常のコード変更と同様にバージョン管理すること
* 各コミットの時点でテストが全て通過していることを確認すること
* テストの変更と実装の変更は別々のコミットとすること
* コミットメッセージの形式は[Git操作ルール](mdc:git.mdc)に従うこと 