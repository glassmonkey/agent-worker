---
description: 実装プロセスに関するルールを定義します
globs: ["**/*"]
---

# 実装プロセスルール

## 1. 目的

本ルールは以下の目的のために定義されています：

1. 実装品質の向上
   - テスト駆動開発の促進
   - コード品質の維持
   - バグの早期発見

2. 開発効率の向上
   - 作業手順の標準化
   - 進捗の可視化
   - フィードバックの迅速化

3. メンテナンス性の向上
   - コードの可読性確保
   - 変更履歴の明確化
   - ドキュメントの充実

## 2. 開発準備

1. ブランチ作成
   - 課題番号を含むブランチ名の設定
   - mainブランチからの作成
   ```bash
   make start-work branch=<branch-name>
   ```

2. 実装計画の立案
   - テスト計画
     * 単体テストの範囲
     * 統合テストの範囲
     * エッジケースの特定
   
   - タスクの分割
     * 機能単位での分割
     * 依存関係の整理
     * 実装順序の決定
   
   - 技術検証
     * 使用技術の選定
     * プロトタイプの作成
     * 性能要件の確認

## 3. テスト駆動開発

1. テストの作成
   - テストケースの設計
     * 正常系のテスト
     * 異常系のテスト
     * 境界値のテスト
   
   - テストコードの実装
     * テストの可読性確保
     * テストデータの準備
     * モックの適切な使用

2. 実装
   - テストが失敗する状態の確認
   - 最小限の実装
   - テストの通過確認
   ```bash
   make test
   ```

3. リファクタリング
   - コードの整理
   - 重複の排除
   - パフォーマンスの改善
   ```bash
   make lint
   make type-check
   ```

## 4. コミット管理

1. コミットの粒度
   - 機能単位での分割
   - テストと実装の対応
   - 1コミットの適切なサイズ

2. コミットメッセージ
   - 種別の明示（feat/fix/docs/style/refactor/test/chore）
   - 変更内容の簡潔な説明
   - 必要に応じて詳細な説明を追加

3. プッシュのタイミング
   - テスト通過後
   - リンター警告解消後
   - 型チェック完了後

## 5. 進捗管理

1. 状況の更新
   - 課題への進捗コメント
   - ブロッカーの報告
   - 予定変更の共有

2. 方針の見直し
   - 技術的な課題の報告
   - 代替案の検討
   - スコープの調整

## 6. 品質確認

1. コードの品質
   - 命名規則の遵守
   - コードの構造化
   - エラー処理の適切性

2. テストの品質
   - テストカバレッジの確認
   - テストケースの網羅性
   - テストの保守性

3. ドキュメント
   - コメントの適切性
   - APIドキュメントの更新
   - 設計ドキュメントの更新

## 7. 完了条件

1. 実装の完了
   - 全てのテストが通過
   ```bash
   make test
   ```
   - リンター警告の解消
   ```bash
   make lint
   ```
   - 型チェックの完了
   ```bash
   make type-check
   ```

2. レビュー準備
   - コードの整理
   - ドキュメントの更新
   - 振り返りの実施
   ```bash
   make prepare-retrospective
   make check-retrospective
   ```

## 8. 関連ルール

* [開発サイクルルール](mdc:development-cycle.mdc): 開発サイクルの全体像
* [テストコード管理ルール](mdc:test.mdc): テストコードの管理方法
* [品質確認ルール](mdc:quality-check.mdc): 品質確認の基準と手順
* [Git操作ルール](mdc:git.mdc): Git操作の手順 