---
description: "Next.jsアプリケーションの設計方針とベストプラクティス"
globs: ["app/src/**/*.{ts,tsx}"]
---

# Next.jsアプリケーションルール

## アプリケーション構造
- App Router規約に従ったファイル配置
  - `app/src/app`: ルートディレクトリ
  - `app/src/components`: 共通コンポーネント
  - `app/src/lib`: ユーティリティ関数
  - `app/src/types`: 型定義
  - `app/src/styles`: スタイル定義

## ルーティング
- ページファイル
  - `page.tsx`: ページコンポーネント
  - `layout.tsx`: レイアウトコンポーネント
  - `loading.tsx`: ローディング状態
  - `error.tsx`: エラー状態
  - `not-found.tsx`: 404ページ
- 動的ルーティング
  - `[id]`: 動的セグメント
  - `[...slug]`: キャッチオールセグメント
  - `(group)`: ルートグループ化

## コンポーネント設計
- 分類
  - ページコンポーネント: ルーティングに対応
  - 共通コンポーネント: 複数のページで使用
  - 機能コンポーネント: 特定の機能に特化
  - レイアウトコンポーネント: 画面構造を定義
- 実装方針
  - サーバーコンポーネントを優先的に使用
  - クライアントコンポーネントは必要な場合のみ
  - コンポーネント間の責任を明確に分離
  - Props型は明示的に定義

## データフェッチ
- 基本方針
  - サーバーサイドでのデータ取得を優先
  - キャッシュを適切に活用
  - エラーハンドリングを適切に実装
- 実装方法
  - Route Handlersを使用したAPI実装
  - Server Actionsを活用した更新処理
  - 適切なキャッシュ戦略の選択

## パフォーマンス最適化
- 画像最適化
  - `next/image`を使用
  - 適切なサイズと形式を指定
  - プレースホルダーを設定
- ルーティング最適化
  - `next/link`を使用
  - プリフェッチを活用
  - 動的インポートを適切に使用
- バンドルサイズ最適化
  - コード分割を活用
  - 不要なインポートを削除
  - 大きなライブラリは必要な部分のみ使用

## テスト
- 単体テスト
  - コンポーネントの独立したテスト
  - ユーティリティ関数のテスト
  - モックを適切に使用
- 統合テスト
  - ページ単位のテスト
  - APIとの連携テスト
  - ルーティングのテスト
- E2Eテスト
  - 重要なユーザーフロー
  - クリティカルパス
  - エラーケース 